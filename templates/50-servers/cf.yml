AWSTemplateFormatVersion: "2010-09-09"
Description: Factorio Spot Price Servers (50) via Docker / ECS
Parameters:

  ECSAMI:
    Description: AWS ECS AMI ID
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id

  FactorioImageTag:
    Type: String
    Description: "(Examples include latest, stable, 0.17, 0.17.33) Refer to tag descriptions available here: https://hub.docker.com/r/factoriotools/factorio/)"
    Default: latest

  InstancePurchaseMode:
    Type: String
    Description: "Spot: Much cheaper, but your instance might restart during gameplay with a few minutes of unsaved gameplay lost. On Demand: Instance will be created in on-demand mode. More expensive, but your gameplay is unlikely to be interrupted by the server going down."
    Default: "Spot"
    AllowedValues:
    - "On Demand"
    - "Spot"

  InstanceType:
    Type: String
    Description: "Spot: While m6a.large is a good instance type, you should leave this blank to get the best value instance for the provided specs. Override at your discretion: https://aws.amazon.com/ec2/instance-types/. On Demand: You must specify this. "
    Default: ""

  SpotPrice:
    Type: String
    Description: "Spot: the max cents/hr to pay for spot instance. On Demand: Ignored"
    Default: "0.05"

  SpotMinMemoryMiB:
    Type: Number
    Description: "Spot: the minimum desired memory for your instance. On Demand: Ignored"
    Default: 2048

  SpotMinVCpuCount:
    Type: Number
    Description: "Spot: the minimum desired VCPUs for your instance. On Demand: Ignored"
    Default: 2

  KeyPairName:
    Type: String
    Description: (Optional - An empty value disables this feature)
    Default: ''

  YourIp:
    Type: String
    Description: (Optional - An empty value disables this feature)
    Default: ''

  HostedZoneId:
    Type: AWS::Route53::HostedZone::Id
    Description: (Optional - An empty value disables this feature) If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance starts, supply the hosted zone ID here.

  SubDomainPrefix:
    Type: String
    Description: The default Route Name prefix that will be given to your servers if a HostName is defined. (e.g. factorio-1, factorio-2, etc.)
    Default: 'factorio'

  EnableRcon:
    Type: String
    Description: Refer to https://hub.docker.com/r/factoriotools/factorio/ for further RCON configuration details. This parameter simply opens / closes the port on the security group.
    Default: false
    AllowedValues:
    - true
    - false

  UpdateModsOnStart:
    Type: String
    Description: Refer to https://hub.docker.com/r/factoriotools/factorio/ for further configuration details.
    Default: false
    AllowedValues:
    - true
    - false

  # ====================================================
  # 1 - Server Specific Variables
  # ====================================================

  ServerState1:
    Type: String
    Description: "Running: A spot instance for Server 1 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Running
    AllowedValues:
    - Running
    - Stopped

  # ====================================================
  # 2 - Server Specific Variables
  # ====================================================

  ServerState2:
    Type: String
    Description: "Running: A spot instance for Server 2 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Stopped
    AllowedValues:
    - Running
    - Stopped

  # ====================================================
  # 3 - Server Specific Variables
  # ====================================================

  ServerState3:
    Type: String
    Description: "Running: A spot instance for Server 3 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Stopped
    AllowedValues:
    - Running
    - Stopped

  # ====================================================
  # 4 - Server Specific Variables
  # ====================================================

  ServerState4:
    Type: String
    Description: "Running: A spot instance for Server 4 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Stopped
    AllowedValues:
    - Running
    - Stopped

  # ====================================================
  # 5 - Server Specific Variables
  # ====================================================

  ServerState5:
    Type: String
    Description: "Running: A spot instance for Server 5 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Stopped
    AllowedValues:
    - Running
    - Stopped

  # ====================================================
  # 6 - Server Specific Variables
  # ====================================================

  ServerState6:
    Type: String
    Description: "Running: A spot instance for Server 6 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Stopped
    AllowedValues:
    - Running
    - Stopped

  # ====================================================
  # 7 - Server Specific Variables
  # ====================================================

  ServerState7:
    Type: String
    Description: "Running: A spot instance for Server 7 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Stopped
    AllowedValues:
    - Running
    - Stopped

  # ====================================================
  # 8 - Server Specific Variables
  # ====================================================

  ServerState8:
    Type: String
    Description: "Running: A spot instance for Server 8 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Stopped
    AllowedValues:
    - Running
    - Stopped

  # ====================================================
  # 9 - Server Specific Variables
  # ====================================================

  ServerState9:
    Type: String
    Description: "Running: A spot instance for Server 9 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Stopped
    AllowedValues:
    - Running
    - Stopped

  # ====================================================
  # 10 - Server Specific Variables
  # ====================================================

  ServerState10:
    Type: String
    Description: "Running: A spot instance for Server 10 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Stopped
    AllowedValues:
    - Running
    - Stopped

  # ====================================================
  # 11 - Server Specific Variables
  # ====================================================

  ServerState11:
    Type: String
    Description: "Running: A spot instance for Server 11 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Stopped
    AllowedValues:
    - Running
    - Stopped

  # ====================================================
  # 12 - Server Specific Variables
  # ====================================================

  ServerState12:
    Type: String
    Description: "Running: A spot instance for Server 12 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Stopped
    AllowedValues:
    - Running
    - Stopped

  # ====================================================
  # 13 - Server Specific Variables
  # ====================================================

  ServerState13:
    Type: String
    Description: "Running: A spot instance for Server 13 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Stopped
    AllowedValues:
    - Running
    - Stopped

  # ====================================================
  # 14 - Server Specific Variables
  # ====================================================

  ServerState14:
    Type: String
    Description: "Running: A spot instance for Server 14 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Stopped
    AllowedValues:
    - Running
    - Stopped

  # ====================================================
  # 15 - Server Specific Variables
  # ====================================================

  ServerState15:
    Type: String
    Description: "Running: A spot instance for Server 15 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Stopped
    AllowedValues:
    - Running
    - Stopped

  # ====================================================
  # 16 - Server Specific Variables
  # ====================================================

  ServerState16:
    Type: String
    Description: "Running: A spot instance for Server 16 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Stopped
    AllowedValues:
    - Running
    - Stopped

  # ====================================================
  # 17 - Server Specific Variables
  # ====================================================

  ServerState17:
    Type: String
    Description: "Running: A spot instance for Server 17 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Stopped
    AllowedValues:
    - Running
    - Stopped

  # ====================================================
  # 18 - Server Specific Variables
  # ====================================================

  ServerState18:
    Type: String
    Description: "Running: A spot instance for Server 18 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Stopped
    AllowedValues:
    - Running
    - Stopped

  # ====================================================
  # 19 - Server Specific Variables
  # ====================================================

  ServerState19:
    Type: String
    Description: "Running: A spot instance for Server 19 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Stopped
    AllowedValues:
    - Running
    - Stopped

  # ====================================================
  # 20 - Server Specific Variables
  # ====================================================

  ServerState20:
    Type: String
    Description: "Running: A spot instance for Server 20 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Stopped
    AllowedValues:
    - Running
    - Stopped

  # ====================================================
  # 21 - Server Specific Variables
  # ====================================================

  ServerState21:
    Type: String
    Description: "Running: A spot instance for Server 21 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Stopped
    AllowedValues:
    - Running
    - Stopped

  # ====================================================
  # 22 - Server Specific Variables
  # ====================================================

  ServerState22:
    Type: String
    Description: "Running: A spot instance for Server 22 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Stopped
    AllowedValues:
    - Running
    - Stopped

  # ====================================================
  # 23 - Server Specific Variables
  # ====================================================

  ServerState23:
    Type: String
    Description: "Running: A spot instance for Server 23 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Stopped
    AllowedValues:
    - Running
    - Stopped

  # ====================================================
  # 24 - Server Specific Variables
  # ====================================================

  ServerState24:
    Type: String
    Description: "Running: A spot instance for Server 24 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Stopped
    AllowedValues:
    - Running
    - Stopped

  # ====================================================
  # 25 - Server Specific Variables
  # ====================================================

  ServerState25:
    Type: String
    Description: "Running: A spot instance for Server 25 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Stopped
    AllowedValues:
    - Running
    - Stopped

  # ====================================================
  # 26 - Server Specific Variables
  # ====================================================

  ServerState26:
    Type: String
    Description: "Running: A spot instance for Server 26 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Stopped
    AllowedValues:
    - Running
    - Stopped

  # ====================================================
  # 27 - Server Specific Variables
  # ====================================================

  ServerState27:
    Type: String
    Description: "Running: A spot instance for Server 27 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Stopped
    AllowedValues:
    - Running
    - Stopped

  # ====================================================
  # 28 - Server Specific Variables
  # ====================================================

  ServerState28:
    Type: String
    Description: "Running: A spot instance for Server 28 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Stopped
    AllowedValues:
    - Running
    - Stopped

  # ====================================================
  # 29 - Server Specific Variables
  # ====================================================

  ServerState29:
    Type: String
    Description: "Running: A spot instance for Server 29 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Stopped
    AllowedValues:
    - Running
    - Stopped

  # ====================================================
  # 30 - Server Specific Variables
  # ====================================================

  ServerState30:
    Type: String
    Description: "Running: A spot instance for Server 30 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Stopped
    AllowedValues:
    - Running
    - Stopped

  # ====================================================
  # 31 - Server Specific Variables
  # ====================================================

  ServerState31:
    Type: String
    Description: "Running: A spot instance for Server 31 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Stopped
    AllowedValues:
    - Running
    - Stopped

  # ====================================================
  # 32 - Server Specific Variables
  # ====================================================

  ServerState32:
    Type: String
    Description: "Running: A spot instance for Server 32 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Stopped
    AllowedValues:
    - Running
    - Stopped

  # ====================================================
  # 33 - Server Specific Variables
  # ====================================================

  ServerState33:
    Type: String
    Description: "Running: A spot instance for Server 33 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Stopped
    AllowedValues:
    - Running
    - Stopped

  # ====================================================
  # 34 - Server Specific Variables
  # ====================================================

  ServerState34:
    Type: String
    Description: "Running: A spot instance for Server 34 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Stopped
    AllowedValues:
    - Running
    - Stopped

  # ====================================================
  # 35 - Server Specific Variables
  # ====================================================

  ServerState35:
    Type: String
    Description: "Running: A spot instance for Server 35 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Stopped
    AllowedValues:
    - Running
    - Stopped

  # ====================================================
  # 36 - Server Specific Variables
  # ====================================================

  ServerState36:
    Type: String
    Description: "Running: A spot instance for Server 36 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Stopped
    AllowedValues:
    - Running
    - Stopped

  # ====================================================
  # 37 - Server Specific Variables
  # ====================================================

  ServerState37:
    Type: String
    Description: "Running: A spot instance for Server 37 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Stopped
    AllowedValues:
    - Running
    - Stopped

  # ====================================================
  # 38 - Server Specific Variables
  # ====================================================

  ServerState38:
    Type: String
    Description: "Running: A spot instance for Server 38 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Stopped
    AllowedValues:
    - Running
    - Stopped

  # ====================================================
  # 39 - Server Specific Variables
  # ====================================================

  ServerState39:
    Type: String
    Description: "Running: A spot instance for Server 39 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Stopped
    AllowedValues:
    - Running
    - Stopped

  # ====================================================
  # 40 - Server Specific Variables
  # ====================================================

  ServerState40:
    Type: String
    Description: "Running: A spot instance for Server 40 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Stopped
    AllowedValues:
    - Running
    - Stopped

  # ====================================================
  # 41 - Server Specific Variables
  # ====================================================

  ServerState41:
    Type: String
    Description: "Running: A spot instance for Server 41 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Stopped
    AllowedValues:
    - Running
    - Stopped

  # ====================================================
  # 42 - Server Specific Variables
  # ====================================================

  ServerState42:
    Type: String
    Description: "Running: A spot instance for Server 42 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Stopped
    AllowedValues:
    - Running
    - Stopped

  # ====================================================
  # 43 - Server Specific Variables
  # ====================================================

  ServerState43:
    Type: String
    Description: "Running: A spot instance for Server 43 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Stopped
    AllowedValues:
    - Running
    - Stopped

  # ====================================================
  # 44 - Server Specific Variables
  # ====================================================

  ServerState44:
    Type: String
    Description: "Running: A spot instance for Server 44 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Stopped
    AllowedValues:
    - Running
    - Stopped

  # ====================================================
  # 45 - Server Specific Variables
  # ====================================================

  ServerState45:
    Type: String
    Description: "Running: A spot instance for Server 45 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Stopped
    AllowedValues:
    - Running
    - Stopped

  # ====================================================
  # 46 - Server Specific Variables
  # ====================================================

  ServerState46:
    Type: String
    Description: "Running: A spot instance for Server 46 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Stopped
    AllowedValues:
    - Running
    - Stopped

  # ====================================================
  # 47 - Server Specific Variables
  # ====================================================

  ServerState47:
    Type: String
    Description: "Running: A spot instance for Server 47 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Stopped
    AllowedValues:
    - Running
    - Stopped

  # ====================================================
  # 48 - Server Specific Variables
  # ====================================================

  ServerState48:
    Type: String
    Description: "Running: A spot instance for Server 48 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Stopped
    AllowedValues:
    - Running
    - Stopped

  # ====================================================
  # 49 - Server Specific Variables
  # ====================================================

  ServerState49:
    Type: String
    Description: "Running: A spot instance for Server 49 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Stopped
    AllowedValues:
    - Running
    - Stopped

  # ====================================================
  # 50 - Server Specific Variables
  # ====================================================

  ServerState50:
    Type: String
    Description: "Running: A spot instance for Server 50 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Stopped
    AllowedValues:
    - Running
    - Stopped

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Essential Configuration
        Parameters:
        - FactorioImageTag
        - EnableRcon
        - UpdateModsOnStart
        - ServerState1
        - ServerState2
        - ServerState3
        - ServerState4
        - ServerState5
        - ServerState6
        - ServerState7
        - ServerState8
        - ServerState9
        - ServerState10
        - ServerState11
        - ServerState12
        - ServerState13
        - ServerState14
        - ServerState15
        - ServerState16
        - ServerState17
        - ServerState18
        - ServerState19
        - ServerState20
        - ServerState21
        - ServerState22
        - ServerState23
        - ServerState24
        - ServerState25
        - ServerState26
        - ServerState27
        - ServerState28
        - ServerState29
        - ServerState30
        - ServerState31
        - ServerState32
        - ServerState33
        - ServerState34
        - ServerState35
        - ServerState36
        - ServerState37
        - ServerState38
        - ServerState39
        - ServerState40
        - ServerState41
        - ServerState42
        - ServerState43
        - ServerState44
        - ServerState45
        - ServerState46
        - ServerState47
        - ServerState48
        - ServerState49
        - ServerState50
      - Label:
          default: Instance Configuration
        Parameters:
        - InstancePurchaseMode
        - InstanceType
        - SpotPrice
        - SpotMinMemoryMiB
        - SpotMinVCpuCount
      - Label:
          default: Remote Access (SSH) Configuration (Optional)
        Parameters:
        - KeyPairName
        - YourIp
      - Label:
          default: DNS Configuration (Optional)
        Parameters:
        - HostedZoneId
        - SubDomainPrefix
    ParameterLabels:
      FactorioImageTag:
        default: "Which version of Factorio do you want to launch?"
      InstanceType:
        default: "Which instance type? You must make sure this is available in your region! https://aws.amazon.com/ec2/pricing/on-demand/"
      KeyPairName:
        default: "If you wish to access the instance via SSH, select a Key Pair to use. https://console.aws.amazon.com/ec2/v2/home?#KeyPairs:sort=keyName"
      YourIp:
        default: "If you wish to access the instance via SSH, provide your public IP address."
      HostedZoneId:
        default: "If you have a hosted zone in Route 53 and wish to update a DNS record whenever your Factorio instance starts, supply the hosted zone ID here."
      SubDomainPrefix:
        default: "If you have a hosted zone in Route 53, provide the sub domain prefix for the generation of routes per server."
      EnableRcon:
        default: "Do you wish to enable RCON?"
      UpdateModsOnStart:
        default: "Do you wish to update your mods on container start"
      ServerState1:
        default: "Update this parameter to shut down / start up your Factorio server 1 as required to save on cost. Takes a few minutes to take effect."
      ServerState2:
        default: "Update this parameter to shut down / start up your Factorio server 2 as required to save on cost. Takes a few minutes to take effect."
      ServerState3:
        default: "Update this parameter to shut down / start up your Factorio server 3 as required to save on cost. Takes a few minutes to take effect."
      ServerState4:
        default: "Update this parameter to shut down / start up your Factorio server 4 as required to save on cost. Takes a few minutes to take effect."
      ServerState5:
        default: "Update this parameter to shut down / start up your Factorio server 5 as required to save on cost. Takes a few minutes to take effect."
      ServerState6:
        default: "Update this parameter to shut down / start up your Factorio server 6 as required to save on cost. Takes a few minutes to take effect."
      ServerState7:
        default: "Update this parameter to shut down / start up your Factorio server 7 as required to save on cost. Takes a few minutes to take effect."
      ServerState8:
        default: "Update this parameter to shut down / start up your Factorio server 8 as required to save on cost. Takes a few minutes to take effect."
      ServerState9:
        default: "Update this parameter to shut down / start up your Factorio server 9 as required to save on cost. Takes a few minutes to take effect."
      ServerState10:
        default: "Update this parameter to shut down / start up your Factorio server 10 as required to save on cost. Takes a few minutes to take effect."
      ServerState11:
        default: "Update this parameter to shut down / start up your Factorio server 11 as required to save on cost. Takes a few minutes to take effect."
      ServerState12:
        default: "Update this parameter to shut down / start up your Factorio server 12 as required to save on cost. Takes a few minutes to take effect."
      ServerState13:
        default: "Update this parameter to shut down / start up your Factorio server 13 as required to save on cost. Takes a few minutes to take effect."
      ServerState14:
        default: "Update this parameter to shut down / start up your Factorio server 14 as required to save on cost. Takes a few minutes to take effect."
      ServerState15:
        default: "Update this parameter to shut down / start up your Factorio server 15 as required to save on cost. Takes a few minutes to take effect."
      ServerState16:
        default: "Update this parameter to shut down / start up your Factorio server 16 as required to save on cost. Takes a few minutes to take effect."
      ServerState17:
        default: "Update this parameter to shut down / start up your Factorio server 17 as required to save on cost. Takes a few minutes to take effect."
      ServerState18:
        default: "Update this parameter to shut down / start up your Factorio server 18 as required to save on cost. Takes a few minutes to take effect."
      ServerState19:
        default: "Update this parameter to shut down / start up your Factorio server 19 as required to save on cost. Takes a few minutes to take effect."
      ServerState20:
        default: "Update this parameter to shut down / start up your Factorio server 20 as required to save on cost. Takes a few minutes to take effect."
      ServerState21:
        default: "Update this parameter to shut down / start up your Factorio server 21 as required to save on cost. Takes a few minutes to take effect."
      ServerState22:
        default: "Update this parameter to shut down / start up your Factorio server 22 as required to save on cost. Takes a few minutes to take effect."
      ServerState23:
        default: "Update this parameter to shut down / start up your Factorio server 23 as required to save on cost. Takes a few minutes to take effect."
      ServerState24:
        default: "Update this parameter to shut down / start up your Factorio server 24 as required to save on cost. Takes a few minutes to take effect."
      ServerState25:
        default: "Update this parameter to shut down / start up your Factorio server 25 as required to save on cost. Takes a few minutes to take effect."
      ServerState26:
        default: "Update this parameter to shut down / start up your Factorio server 26 as required to save on cost. Takes a few minutes to take effect."
      ServerState27:
        default: "Update this parameter to shut down / start up your Factorio server 27 as required to save on cost. Takes a few minutes to take effect."
      ServerState28:
        default: "Update this parameter to shut down / start up your Factorio server 28 as required to save on cost. Takes a few minutes to take effect."
      ServerState29:
        default: "Update this parameter to shut down / start up your Factorio server 29 as required to save on cost. Takes a few minutes to take effect."
      ServerState30:
        default: "Update this parameter to shut down / start up your Factorio server 30 as required to save on cost. Takes a few minutes to take effect."
      ServerState31:
        default: "Update this parameter to shut down / start up your Factorio server 31 as required to save on cost. Takes a few minutes to take effect."
      ServerState32:
        default: "Update this parameter to shut down / start up your Factorio server 32 as required to save on cost. Takes a few minutes to take effect."
      ServerState33:
        default: "Update this parameter to shut down / start up your Factorio server 33 as required to save on cost. Takes a few minutes to take effect."
      ServerState34:
        default: "Update this parameter to shut down / start up your Factorio server 34 as required to save on cost. Takes a few minutes to take effect."
      ServerState35:
        default: "Update this parameter to shut down / start up your Factorio server 35 as required to save on cost. Takes a few minutes to take effect."
      ServerState36:
        default: "Update this parameter to shut down / start up your Factorio server 36 as required to save on cost. Takes a few minutes to take effect."
      ServerState37:
        default: "Update this parameter to shut down / start up your Factorio server 37 as required to save on cost. Takes a few minutes to take effect."
      ServerState38:
        default: "Update this parameter to shut down / start up your Factorio server 38 as required to save on cost. Takes a few minutes to take effect."
      ServerState39:
        default: "Update this parameter to shut down / start up your Factorio server 39 as required to save on cost. Takes a few minutes to take effect."
      ServerState40:
        default: "Update this parameter to shut down / start up your Factorio server 40 as required to save on cost. Takes a few minutes to take effect."
      ServerState41:
        default: "Update this parameter to shut down / start up your Factorio server 41 as required to save on cost. Takes a few minutes to take effect."
      ServerState42:
        default: "Update this parameter to shut down / start up your Factorio server 42 as required to save on cost. Takes a few minutes to take effect."
      ServerState43:
        default: "Update this parameter to shut down / start up your Factorio server 43 as required to save on cost. Takes a few minutes to take effect."
      ServerState44:
        default: "Update this parameter to shut down / start up your Factorio server 44 as required to save on cost. Takes a few minutes to take effect."
      ServerState45:
        default: "Update this parameter to shut down / start up your Factorio server 45 as required to save on cost. Takes a few minutes to take effect."
      ServerState46:
        default: "Update this parameter to shut down / start up your Factorio server 46 as required to save on cost. Takes a few minutes to take effect."
      ServerState47:
        default: "Update this parameter to shut down / start up your Factorio server 47 as required to save on cost. Takes a few minutes to take effect."
      ServerState48:
        default: "Update this parameter to shut down / start up your Factorio server 48 as required to save on cost. Takes a few minutes to take effect."
      ServerState49:
        default: "Update this parameter to shut down / start up your Factorio server 49 as required to save on cost. Takes a few minutes to take effect."
      ServerState50:
        default: "Update this parameter to shut down / start up your Factorio server 50 as required to save on cost. Takes a few minutes to take effect."
Conditions:
  KeyPairNameProvided: !Not [ !Equals [ !Ref KeyPairName, '' ] ]
  IpAddressProvided: !Not [ !Equals [ !Ref YourIp, '' ] ]
  DoEnableRcon: !Equals [ !Ref EnableRcon, 'true' ]
  DnsConfigEnabled:
    !And
      - !Not [!Equals [!Ref HostedZoneId, '']]
      - !Not [!Equals [!Ref SubDomainPrefix, '']]
  UsingSpotInstance: !Equals [ !Ref InstancePurchaseMode, 'Spot' ]
  InstanceTypeProvided: !Not [ !Equals [ !Ref InstanceType, '' ] ]

Mappings:
  ServerState:
    Running:
      DesiredCapacity: 1
    Stopped:
      DesiredCapacity: 0

Resources:

  # ====================================================
  # BASIC VPC
  # ====================================================

  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.100.0.0/24
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - [!Ref 'AWS::StackName', 'vpc']

  SubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
      - 0
      - !GetAZs
        Ref: 'AWS::Region'
      CidrBlock: !Select [ 0, !Cidr [ 10.100.0.0/24, 2, 7 ] ]
      VpcId: !Ref Vpc
      MapPublicIpOnLaunch: true

  SubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
      - 1
      - !GetAZs
        Ref: 'AWS::Region'
      CidrBlock: !Select [ 1, !Cidr [ 10.100.0.0/24, 2, 7 ] ]
      VpcId: !Ref Vpc
      MapPublicIpOnLaunch: true

  SubnetARoute:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetA

  SubnetBRoute:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetB

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties: {}

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref Vpc

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc

  Route:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref RouteTable

  EfsSg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-efs"
      GroupDescription: !Sub "${AWS::StackName}-efs"
      SecurityGroupIngress:
      - FromPort: 2049
        ToPort: 2049
        IpProtocol: tcp
        SourceSecurityGroupId: !Ref Ec2Sg
      VpcId: !Ref Vpc

  Ec2Sg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-ec2"
      GroupDescription: !Sub "${AWS::StackName}-ec2"
      SecurityGroupIngress:
      - !If
        - IpAddressProvided
        - FromPort: 22
          ToPort: 22
          IpProtocol: tcp
          CidrIp: !Sub "${YourIp}/32"
        - !Ref 'AWS::NoValue'
      - FromPort: 34197
        ToPort: 34197
        IpProtocol: udp
        CidrIp: 0.0.0.0/0
      - !If
        - DoEnableRcon
        - FromPort: 27015
          ToPort: 27015
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
        - !Ref 'AWS::NoValue'
      VpcId: !Ref Vpc

  # ====================================================
  # Common Resources
  # ====================================================

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "route53:*"
                Resource: "*"

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref InstanceRole

  # ====================================================
  # 1 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs1:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS
      FileSystemTags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-fs-1"

  Mount1A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs1
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetA

  Mount1B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs1
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetB

  # ====================================================
  # 1 - INSTANCE CONFIG
  # ====================================================

  AutoScalingGroup1:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-1"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState1, DesiredCapacity ]
      MixedInstancesPolicy:
        InstancesDistribution:
          OnDemandPercentageAboveBaseCapacity:
            !If [ UsingSpotInstance, 0, 100 ]
          SpotAllocationStrategy: lowest-price
          SpotMaxPrice:
            !If [ UsingSpotInstance, !Ref SpotPrice, !Ref AWS::NoValue ]
        LaunchTemplate:
          LaunchTemplateSpecification:
            LaunchTemplateId: !Ref LaunchTemplate1
            Version: !GetAtt LaunchTemplate1.LatestVersionNumber
          Overrides:
           - Fn::If:
             - InstanceTypeProvided
             - InstanceType: !Ref InstanceType
             - InstanceRequirements:
                 MemoryMiB:
                   Min: !Ref SpotMinMemoryMiB
                 VCpuCount:
                   Min: !Ref SpotMinVCpuCount
      MaxSize: !FindInMap [ ServerState, !Ref ServerState1, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState1, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster1:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "${AWS::StackName}-cluster-1"

  LaunchTemplate1:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${AWS::StackName}-launch-template-1
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !GetAtt InstanceProfile.Arn
        ImageId: !Ref ECSAMI
        SecurityGroupIds:
        - !Ref Ec2Sg
        KeyName:
          !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            echo ECS_CLUSTER=${EcsCluster1} >> /etc/ecs/ecs.config

  EcsService1:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster1
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState1, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-1"
      TaskDefinition: !Ref EcsTask1
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask1:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount1A
    - Mount1B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-1"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs1
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: !Sub "${AWS::StackName}-factorio-1"
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 2 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs2:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS
      FileSystemTags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-fs-2"

  Mount2A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs2
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetA

  Mount2B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs2
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetB

  # ====================================================
  # 2 - INSTANCE CONFIG
  # ====================================================

  AutoScalingGroup2:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-2"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState2, DesiredCapacity ]
      MixedInstancesPolicy:
        InstancesDistribution:
          OnDemandPercentageAboveBaseCapacity:
            !If [ UsingSpotInstance, 0, 100 ]
          SpotAllocationStrategy: lowest-price
          SpotMaxPrice:
            !If [ UsingSpotInstance, !Ref SpotPrice, !Ref AWS::NoValue ]
        LaunchTemplate:
          LaunchTemplateSpecification:
            LaunchTemplateId: !Ref LaunchTemplate2
            Version: !GetAtt LaunchTemplate2.LatestVersionNumber
          Overrides:
           - Fn::If:
             - InstanceTypeProvided
             - InstanceType: !Ref InstanceType
             - InstanceRequirements:
                 MemoryMiB:
                   Min: !Ref SpotMinMemoryMiB
                 VCpuCount:
                   Min: !Ref SpotMinVCpuCount
      MaxSize: !FindInMap [ ServerState, !Ref ServerState2, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState2, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster2:
    Type: AWS::ECS::Cluster
    DependsOn: EcsCluster1
    Properties:
      ClusterName: !Sub "${AWS::StackName}-cluster-2"

  LaunchTemplate2:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${AWS::StackName}-launch-template-2
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !GetAtt InstanceProfile.Arn
        ImageId: !Ref ECSAMI
        SecurityGroupIds:
        - !Ref Ec2Sg
        KeyName:
          !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            echo ECS_CLUSTER=${EcsCluster2} >> /etc/ecs/ecs.config

  EcsService2:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster2
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState2, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-2"
      TaskDefinition: !Ref EcsTask2
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask2:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount2A
    - Mount2B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-2"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs2
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: !Sub "${AWS::StackName}-factorio-2"
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 3 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs3:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS
      FileSystemTags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-fs-3"

  Mount3A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs3
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetA

  Mount3B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs3
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetB

  # ====================================================
  # 3 - INSTANCE CONFIG
  # ====================================================

  AutoScalingGroup3:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-3"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState3, DesiredCapacity ]
      MixedInstancesPolicy:
        InstancesDistribution:
          OnDemandPercentageAboveBaseCapacity:
            !If [ UsingSpotInstance, 0, 100 ]
          SpotAllocationStrategy: lowest-price
          SpotMaxPrice:
            !If [ UsingSpotInstance, !Ref SpotPrice, !Ref AWS::NoValue ]
        LaunchTemplate:
          LaunchTemplateSpecification:
            LaunchTemplateId: !Ref LaunchTemplate3
            Version: !GetAtt LaunchTemplate3.LatestVersionNumber
          Overrides:
           - Fn::If:
             - InstanceTypeProvided
             - InstanceType: !Ref InstanceType
             - InstanceRequirements:
                 MemoryMiB:
                   Min: !Ref SpotMinMemoryMiB
                 VCpuCount:
                   Min: !Ref SpotMinVCpuCount
      MaxSize: !FindInMap [ ServerState, !Ref ServerState3, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState3, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster3:
    Type: AWS::ECS::Cluster
    DependsOn: EcsCluster2
    Properties:
      ClusterName: !Sub "${AWS::StackName}-cluster-3"

  LaunchTemplate3:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${AWS::StackName}-launch-template-3
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !GetAtt InstanceProfile.Arn
        ImageId: !Ref ECSAMI
        SecurityGroupIds:
        - !Ref Ec2Sg
        KeyName:
          !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            echo ECS_CLUSTER=${EcsCluster3} >> /etc/ecs/ecs.config

  EcsService3:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster3
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState3, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-3"
      TaskDefinition: !Ref EcsTask3
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask3:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount3A
    - Mount3B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-3"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs3
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: !Sub "${AWS::StackName}-factorio-3"
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 4 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs4:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS
      FileSystemTags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-fs-4"

  Mount4A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs4
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetA

  Mount4B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs4
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetB

  # ====================================================
  # 4 - INSTANCE CONFIG
  # ====================================================

  AutoScalingGroup4:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-4"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState4, DesiredCapacity ]
      MixedInstancesPolicy:
        InstancesDistribution:
          OnDemandPercentageAboveBaseCapacity:
            !If [ UsingSpotInstance, 0, 100 ]
          SpotAllocationStrategy: lowest-price
          SpotMaxPrice:
            !If [ UsingSpotInstance, !Ref SpotPrice, !Ref AWS::NoValue ]
        LaunchTemplate:
          LaunchTemplateSpecification:
            LaunchTemplateId: !Ref LaunchTemplate4
            Version: !GetAtt LaunchTemplate4.LatestVersionNumber
          Overrides:
           - Fn::If:
             - InstanceTypeProvided
             - InstanceType: !Ref InstanceType
             - InstanceRequirements:
                 MemoryMiB:
                   Min: !Ref SpotMinMemoryMiB
                 VCpuCount:
                   Min: !Ref SpotMinVCpuCount
      MaxSize: !FindInMap [ ServerState, !Ref ServerState4, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState4, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster4:
    Type: AWS::ECS::Cluster
    DependsOn: EcsCluster3
    Properties:
      ClusterName: !Sub "${AWS::StackName}-cluster-4"

  LaunchTemplate4:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${AWS::StackName}-launch-template-4
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !GetAtt InstanceProfile.Arn
        ImageId: !Ref ECSAMI
        SecurityGroupIds:
        - !Ref Ec2Sg
        KeyName:
          !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            echo ECS_CLUSTER=${EcsCluster4} >> /etc/ecs/ecs.config

  EcsService4:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster4
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState4, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-4"
      TaskDefinition: !Ref EcsTask4
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask4:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount4A
    - Mount4B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-4"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs4
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: !Sub "${AWS::StackName}-factorio-4"
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 5 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs5:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS
      FileSystemTags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-fs-5"

  Mount5A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs5
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetA

  Mount5B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs5
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetB

  # ====================================================
  # 5 - INSTANCE CONFIG
  # ====================================================

  AutoScalingGroup5:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-5"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState5, DesiredCapacity ]
      MixedInstancesPolicy:
        InstancesDistribution:
          OnDemandPercentageAboveBaseCapacity:
            !If [ UsingSpotInstance, 0, 100 ]
          SpotAllocationStrategy: lowest-price
          SpotMaxPrice:
            !If [ UsingSpotInstance, !Ref SpotPrice, !Ref AWS::NoValue ]
        LaunchTemplate:
          LaunchTemplateSpecification:
            LaunchTemplateId: !Ref LaunchTemplate5
            Version: !GetAtt LaunchTemplate5.LatestVersionNumber
          Overrides:
           - Fn::If:
             - InstanceTypeProvided
             - InstanceType: !Ref InstanceType
             - InstanceRequirements:
                 MemoryMiB:
                   Min: !Ref SpotMinMemoryMiB
                 VCpuCount:
                   Min: !Ref SpotMinVCpuCount
      MaxSize: !FindInMap [ ServerState, !Ref ServerState5, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState5, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster5:
    Type: AWS::ECS::Cluster
    DependsOn: EcsCluster4
    Properties:
      ClusterName: !Sub "${AWS::StackName}-cluster-5"

  LaunchTemplate5:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${AWS::StackName}-launch-template-5
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !GetAtt InstanceProfile.Arn
        ImageId: !Ref ECSAMI
        SecurityGroupIds:
        - !Ref Ec2Sg
        KeyName:
          !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            echo ECS_CLUSTER=${EcsCluster5} >> /etc/ecs/ecs.config

  EcsService5:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster5
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState5, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-5"
      TaskDefinition: !Ref EcsTask5
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask5:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount5A
    - Mount5B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-5"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs5
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: !Sub "${AWS::StackName}-factorio-5"
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 6 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs6:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS
      FileSystemTags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-fs-6"

  Mount6A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs6
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetA

  Mount6B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs6
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetB

  # ====================================================
  # 6 - INSTANCE CONFIG
  # ====================================================

  AutoScalingGroup6:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-6"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState6, DesiredCapacity ]
      MixedInstancesPolicy:
        InstancesDistribution:
          OnDemandPercentageAboveBaseCapacity:
            !If [ UsingSpotInstance, 0, 100 ]
          SpotAllocationStrategy: lowest-price
          SpotMaxPrice:
            !If [ UsingSpotInstance, !Ref SpotPrice, !Ref AWS::NoValue ]
        LaunchTemplate:
          LaunchTemplateSpecification:
            LaunchTemplateId: !Ref LaunchTemplate6
            Version: !GetAtt LaunchTemplate6.LatestVersionNumber
          Overrides:
           - Fn::If:
             - InstanceTypeProvided
             - InstanceType: !Ref InstanceType
             - InstanceRequirements:
                 MemoryMiB:
                   Min: !Ref SpotMinMemoryMiB
                 VCpuCount:
                   Min: !Ref SpotMinVCpuCount
      MaxSize: !FindInMap [ ServerState, !Ref ServerState6, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState6, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster6:
    Type: AWS::ECS::Cluster
    DependsOn: EcsCluster5
    Properties:
      ClusterName: !Sub "${AWS::StackName}-cluster-6"

  LaunchTemplate6:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${AWS::StackName}-launch-template-6
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !GetAtt InstanceProfile.Arn
        ImageId: !Ref ECSAMI
        SecurityGroupIds:
        - !Ref Ec2Sg
        KeyName:
          !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            echo ECS_CLUSTER=${EcsCluster6} >> /etc/ecs/ecs.config

  EcsService6:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster6
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState6, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-6"
      TaskDefinition: !Ref EcsTask6
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask6:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount6A
    - Mount6B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-6"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs6
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: !Sub "${AWS::StackName}-factorio-6"
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 7 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs7:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS
      FileSystemTags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-fs-7"

  Mount7A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs7
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetA

  Mount7B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs7
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetB

  # ====================================================
  # 7 - INSTANCE CONFIG
  # ====================================================

  AutoScalingGroup7:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-7"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState7, DesiredCapacity ]
      MixedInstancesPolicy:
        InstancesDistribution:
          OnDemandPercentageAboveBaseCapacity:
            !If [ UsingSpotInstance, 0, 100 ]
          SpotAllocationStrategy: lowest-price
          SpotMaxPrice:
            !If [ UsingSpotInstance, !Ref SpotPrice, !Ref AWS::NoValue ]
        LaunchTemplate:
          LaunchTemplateSpecification:
            LaunchTemplateId: !Ref LaunchTemplate7
            Version: !GetAtt LaunchTemplate7.LatestVersionNumber
          Overrides:
           - Fn::If:
             - InstanceTypeProvided
             - InstanceType: !Ref InstanceType
             - InstanceRequirements:
                 MemoryMiB:
                   Min: !Ref SpotMinMemoryMiB
                 VCpuCount:
                   Min: !Ref SpotMinVCpuCount
      MaxSize: !FindInMap [ ServerState, !Ref ServerState7, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState7, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster7:
    Type: AWS::ECS::Cluster
    DependsOn: EcsCluster6
    Properties:
      ClusterName: !Sub "${AWS::StackName}-cluster-7"

  LaunchTemplate7:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${AWS::StackName}-launch-template-7
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !GetAtt InstanceProfile.Arn
        ImageId: !Ref ECSAMI
        SecurityGroupIds:
        - !Ref Ec2Sg
        KeyName:
          !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            echo ECS_CLUSTER=${EcsCluster7} >> /etc/ecs/ecs.config

  EcsService7:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster7
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState7, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-7"
      TaskDefinition: !Ref EcsTask7
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask7:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount7A
    - Mount7B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-7"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs7
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: !Sub "${AWS::StackName}-factorio-7"
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 8 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs8:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS
      FileSystemTags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-fs-8"

  Mount8A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs8
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetA

  Mount8B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs8
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetB

  # ====================================================
  # 8 - INSTANCE CONFIG
  # ====================================================

  AutoScalingGroup8:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-8"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState8, DesiredCapacity ]
      MixedInstancesPolicy:
        InstancesDistribution:
          OnDemandPercentageAboveBaseCapacity:
            !If [ UsingSpotInstance, 0, 100 ]
          SpotAllocationStrategy: lowest-price
          SpotMaxPrice:
            !If [ UsingSpotInstance, !Ref SpotPrice, !Ref AWS::NoValue ]
        LaunchTemplate:
          LaunchTemplateSpecification:
            LaunchTemplateId: !Ref LaunchTemplate8
            Version: !GetAtt LaunchTemplate8.LatestVersionNumber
          Overrides:
           - Fn::If:
             - InstanceTypeProvided
             - InstanceType: !Ref InstanceType
             - InstanceRequirements:
                 MemoryMiB:
                   Min: !Ref SpotMinMemoryMiB
                 VCpuCount:
                   Min: !Ref SpotMinVCpuCount
      MaxSize: !FindInMap [ ServerState, !Ref ServerState8, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState8, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster8:
    Type: AWS::ECS::Cluster
    DependsOn: EcsCluster7
    Properties:
      ClusterName: !Sub "${AWS::StackName}-cluster-8"

  LaunchTemplate8:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${AWS::StackName}-launch-template-8
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !GetAtt InstanceProfile.Arn
        ImageId: !Ref ECSAMI
        SecurityGroupIds:
        - !Ref Ec2Sg
        KeyName:
          !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            echo ECS_CLUSTER=${EcsCluster8} >> /etc/ecs/ecs.config

  EcsService8:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster8
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState8, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-8"
      TaskDefinition: !Ref EcsTask8
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask8:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount8A
    - Mount8B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-8"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs8
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: !Sub "${AWS::StackName}-factorio-8"
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 9 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs9:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS
      FileSystemTags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-fs-9"

  Mount9A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs9
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetA

  Mount9B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs9
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetB

  # ====================================================
  # 9 - INSTANCE CONFIG
  # ====================================================

  AutoScalingGroup9:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-9"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState9, DesiredCapacity ]
      MixedInstancesPolicy:
        InstancesDistribution:
          OnDemandPercentageAboveBaseCapacity:
            !If [ UsingSpotInstance, 0, 100 ]
          SpotAllocationStrategy: lowest-price
          SpotMaxPrice:
            !If [ UsingSpotInstance, !Ref SpotPrice, !Ref AWS::NoValue ]
        LaunchTemplate:
          LaunchTemplateSpecification:
            LaunchTemplateId: !Ref LaunchTemplate9
            Version: !GetAtt LaunchTemplate9.LatestVersionNumber
          Overrides:
           - Fn::If:
             - InstanceTypeProvided
             - InstanceType: !Ref InstanceType
             - InstanceRequirements:
                 MemoryMiB:
                   Min: !Ref SpotMinMemoryMiB
                 VCpuCount:
                   Min: !Ref SpotMinVCpuCount
      MaxSize: !FindInMap [ ServerState, !Ref ServerState9, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState9, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster9:
    Type: AWS::ECS::Cluster
    DependsOn: EcsCluster8
    Properties:
      ClusterName: !Sub "${AWS::StackName}-cluster-9"

  LaunchTemplate9:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${AWS::StackName}-launch-template-9
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !GetAtt InstanceProfile.Arn
        ImageId: !Ref ECSAMI
        SecurityGroupIds:
        - !Ref Ec2Sg
        KeyName:
          !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            echo ECS_CLUSTER=${EcsCluster9} >> /etc/ecs/ecs.config

  EcsService9:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster9
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState9, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-9"
      TaskDefinition: !Ref EcsTask9
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask9:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount9A
    - Mount9B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-9"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs9
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: !Sub "${AWS::StackName}-factorio-9"
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 10 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs10:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS
      FileSystemTags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-fs-10"

  Mount10A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs10
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetA

  Mount10B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs10
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetB

  # ====================================================
  # 10 - INSTANCE CONFIG
  # ====================================================

  AutoScalingGroup10:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-10"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState10, DesiredCapacity ]
      MixedInstancesPolicy:
        InstancesDistribution:
          OnDemandPercentageAboveBaseCapacity:
            !If [ UsingSpotInstance, 0, 100 ]
          SpotAllocationStrategy: lowest-price
          SpotMaxPrice:
            !If [ UsingSpotInstance, !Ref SpotPrice, !Ref AWS::NoValue ]
        LaunchTemplate:
          LaunchTemplateSpecification:
            LaunchTemplateId: !Ref LaunchTemplate10
            Version: !GetAtt LaunchTemplate10.LatestVersionNumber
          Overrides:
           - Fn::If:
             - InstanceTypeProvided
             - InstanceType: !Ref InstanceType
             - InstanceRequirements:
                 MemoryMiB:
                   Min: !Ref SpotMinMemoryMiB
                 VCpuCount:
                   Min: !Ref SpotMinVCpuCount
      MaxSize: !FindInMap [ ServerState, !Ref ServerState10, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState10, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster10:
    Type: AWS::ECS::Cluster
    DependsOn: EcsCluster9
    Properties:
      ClusterName: !Sub "${AWS::StackName}-cluster-10"

  LaunchTemplate10:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${AWS::StackName}-launch-template-10
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !GetAtt InstanceProfile.Arn
        ImageId: !Ref ECSAMI
        SecurityGroupIds:
        - !Ref Ec2Sg
        KeyName:
          !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            echo ECS_CLUSTER=${EcsCluster10} >> /etc/ecs/ecs.config

  EcsService10:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster10
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState10, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-10"
      TaskDefinition: !Ref EcsTask10
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask10:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount10A
    - Mount10B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-10"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs10
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: !Sub "${AWS::StackName}-factorio-10"
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 11 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs11:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS
      FileSystemTags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-fs-11"

  Mount11A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs11
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetA

  Mount11B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs11
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetB

  # ====================================================
  # 11 - INSTANCE CONFIG
  # ====================================================

  AutoScalingGroup11:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-11"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState11, DesiredCapacity ]
      MixedInstancesPolicy:
        InstancesDistribution:
          OnDemandPercentageAboveBaseCapacity:
            !If [ UsingSpotInstance, 0, 100 ]
          SpotAllocationStrategy: lowest-price
          SpotMaxPrice:
            !If [ UsingSpotInstance, !Ref SpotPrice, !Ref AWS::NoValue ]
        LaunchTemplate:
          LaunchTemplateSpecification:
            LaunchTemplateId: !Ref LaunchTemplate11
            Version: !GetAtt LaunchTemplate11.LatestVersionNumber
          Overrides:
           - Fn::If:
             - InstanceTypeProvided
             - InstanceType: !Ref InstanceType
             - InstanceRequirements:
                 MemoryMiB:
                   Min: !Ref SpotMinMemoryMiB
                 VCpuCount:
                   Min: !Ref SpotMinVCpuCount
      MaxSize: !FindInMap [ ServerState, !Ref ServerState11, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState11, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster11:
    Type: AWS::ECS::Cluster
    DependsOn: EcsCluster10
    Properties:
      ClusterName: !Sub "${AWS::StackName}-cluster-11"

  LaunchTemplate11:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${AWS::StackName}-launch-template-11
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !GetAtt InstanceProfile.Arn
        ImageId: !Ref ECSAMI
        SecurityGroupIds:
        - !Ref Ec2Sg
        KeyName:
          !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            echo ECS_CLUSTER=${EcsCluster11} >> /etc/ecs/ecs.config

  EcsService11:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster11
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState11, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-11"
      TaskDefinition: !Ref EcsTask11
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask11:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount11A
    - Mount11B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-11"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs11
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: !Sub "${AWS::StackName}-factorio-11"
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 12 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs12:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS
      FileSystemTags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-fs-12"

  Mount12A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs12
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetA

  Mount12B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs12
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetB

  # ====================================================
  # 12 - INSTANCE CONFIG
  # ====================================================

  AutoScalingGroup12:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-12"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState12, DesiredCapacity ]
      MixedInstancesPolicy:
        InstancesDistribution:
          OnDemandPercentageAboveBaseCapacity:
            !If [ UsingSpotInstance, 0, 100 ]
          SpotAllocationStrategy: lowest-price
          SpotMaxPrice:
            !If [ UsingSpotInstance, !Ref SpotPrice, !Ref AWS::NoValue ]
        LaunchTemplate:
          LaunchTemplateSpecification:
            LaunchTemplateId: !Ref LaunchTemplate12
            Version: !GetAtt LaunchTemplate12.LatestVersionNumber
          Overrides:
           - Fn::If:
             - InstanceTypeProvided
             - InstanceType: !Ref InstanceType
             - InstanceRequirements:
                 MemoryMiB:
                   Min: !Ref SpotMinMemoryMiB
                 VCpuCount:
                   Min: !Ref SpotMinVCpuCount
      MaxSize: !FindInMap [ ServerState, !Ref ServerState12, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState12, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster12:
    Type: AWS::ECS::Cluster
    DependsOn: EcsCluster11
    Properties:
      ClusterName: !Sub "${AWS::StackName}-cluster-12"

  LaunchTemplate12:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${AWS::StackName}-launch-template-12
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !GetAtt InstanceProfile.Arn
        ImageId: !Ref ECSAMI
        SecurityGroupIds:
        - !Ref Ec2Sg
        KeyName:
          !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            echo ECS_CLUSTER=${EcsCluster12} >> /etc/ecs/ecs.config

  EcsService12:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster12
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState12, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-12"
      TaskDefinition: !Ref EcsTask12
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask12:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount12A
    - Mount12B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-12"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs12
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: !Sub "${AWS::StackName}-factorio-12"
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 13 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs13:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS
      FileSystemTags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-fs-13"

  Mount13A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs13
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetA

  Mount13B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs13
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetB

  # ====================================================
  # 13 - INSTANCE CONFIG
  # ====================================================

  AutoScalingGroup13:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-13"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState13, DesiredCapacity ]
      MixedInstancesPolicy:
        InstancesDistribution:
          OnDemandPercentageAboveBaseCapacity:
            !If [ UsingSpotInstance, 0, 100 ]
          SpotAllocationStrategy: lowest-price
          SpotMaxPrice:
            !If [ UsingSpotInstance, !Ref SpotPrice, !Ref AWS::NoValue ]
        LaunchTemplate:
          LaunchTemplateSpecification:
            LaunchTemplateId: !Ref LaunchTemplate13
            Version: !GetAtt LaunchTemplate13.LatestVersionNumber
          Overrides:
           - Fn::If:
             - InstanceTypeProvided
             - InstanceType: !Ref InstanceType
             - InstanceRequirements:
                 MemoryMiB:
                   Min: !Ref SpotMinMemoryMiB
                 VCpuCount:
                   Min: !Ref SpotMinVCpuCount
      MaxSize: !FindInMap [ ServerState, !Ref ServerState13, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState13, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster13:
    Type: AWS::ECS::Cluster
    DependsOn: EcsCluster12
    Properties:
      ClusterName: !Sub "${AWS::StackName}-cluster-13"

  LaunchTemplate13:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${AWS::StackName}-launch-template-13
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !GetAtt InstanceProfile.Arn
        ImageId: !Ref ECSAMI
        SecurityGroupIds:
        - !Ref Ec2Sg
        KeyName:
          !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            echo ECS_CLUSTER=${EcsCluster13} >> /etc/ecs/ecs.config

  EcsService13:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster13
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState13, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-13"
      TaskDefinition: !Ref EcsTask13
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask13:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount13A
    - Mount13B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-13"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs13
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: !Sub "${AWS::StackName}-factorio-13"
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 14 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs14:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS
      FileSystemTags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-fs-14"

  Mount14A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs14
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetA

  Mount14B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs14
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetB

  # ====================================================
  # 14 - INSTANCE CONFIG
  # ====================================================

  AutoScalingGroup14:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-14"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState14, DesiredCapacity ]
      MixedInstancesPolicy:
        InstancesDistribution:
          OnDemandPercentageAboveBaseCapacity:
            !If [ UsingSpotInstance, 0, 100 ]
          SpotAllocationStrategy: lowest-price
          SpotMaxPrice:
            !If [ UsingSpotInstance, !Ref SpotPrice, !Ref AWS::NoValue ]
        LaunchTemplate:
          LaunchTemplateSpecification:
            LaunchTemplateId: !Ref LaunchTemplate14
            Version: !GetAtt LaunchTemplate14.LatestVersionNumber
          Overrides:
           - Fn::If:
             - InstanceTypeProvided
             - InstanceType: !Ref InstanceType
             - InstanceRequirements:
                 MemoryMiB:
                   Min: !Ref SpotMinMemoryMiB
                 VCpuCount:
                   Min: !Ref SpotMinVCpuCount
      MaxSize: !FindInMap [ ServerState, !Ref ServerState14, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState14, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster14:
    Type: AWS::ECS::Cluster
    DependsOn: EcsCluster13
    Properties:
      ClusterName: !Sub "${AWS::StackName}-cluster-14"

  LaunchTemplate14:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${AWS::StackName}-launch-template-14
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !GetAtt InstanceProfile.Arn
        ImageId: !Ref ECSAMI
        SecurityGroupIds:
        - !Ref Ec2Sg
        KeyName:
          !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            echo ECS_CLUSTER=${EcsCluster14} >> /etc/ecs/ecs.config

  EcsService14:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster14
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState14, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-14"
      TaskDefinition: !Ref EcsTask14
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask14:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount14A
    - Mount14B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-14"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs14
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: !Sub "${AWS::StackName}-factorio-14"
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 15 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs15:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS
      FileSystemTags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-fs-15"

  Mount15A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs15
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetA

  Mount15B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs15
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetB

  # ====================================================
  # 15 - INSTANCE CONFIG
  # ====================================================

  AutoScalingGroup15:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-15"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState15, DesiredCapacity ]
      MixedInstancesPolicy:
        InstancesDistribution:
          OnDemandPercentageAboveBaseCapacity:
            !If [ UsingSpotInstance, 0, 100 ]
          SpotAllocationStrategy: lowest-price
          SpotMaxPrice:
            !If [ UsingSpotInstance, !Ref SpotPrice, !Ref AWS::NoValue ]
        LaunchTemplate:
          LaunchTemplateSpecification:
            LaunchTemplateId: !Ref LaunchTemplate15
            Version: !GetAtt LaunchTemplate15.LatestVersionNumber
          Overrides:
           - Fn::If:
             - InstanceTypeProvided
             - InstanceType: !Ref InstanceType
             - InstanceRequirements:
                 MemoryMiB:
                   Min: !Ref SpotMinMemoryMiB
                 VCpuCount:
                   Min: !Ref SpotMinVCpuCount
      MaxSize: !FindInMap [ ServerState, !Ref ServerState15, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState15, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster15:
    Type: AWS::ECS::Cluster
    DependsOn: EcsCluster14
    Properties:
      ClusterName: !Sub "${AWS::StackName}-cluster-15"

  LaunchTemplate15:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${AWS::StackName}-launch-template-15
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !GetAtt InstanceProfile.Arn
        ImageId: !Ref ECSAMI
        SecurityGroupIds:
        - !Ref Ec2Sg
        KeyName:
          !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            echo ECS_CLUSTER=${EcsCluster15} >> /etc/ecs/ecs.config

  EcsService15:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster15
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState15, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-15"
      TaskDefinition: !Ref EcsTask15
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask15:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount15A
    - Mount15B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-15"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs15
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: !Sub "${AWS::StackName}-factorio-15"
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 16 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs16:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS
      FileSystemTags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-fs-16"

  Mount16A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs16
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetA

  Mount16B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs16
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetB

  # ====================================================
  # 16 - INSTANCE CONFIG
  # ====================================================

  AutoScalingGroup16:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-16"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState16, DesiredCapacity ]
      MixedInstancesPolicy:
        InstancesDistribution:
          OnDemandPercentageAboveBaseCapacity:
            !If [ UsingSpotInstance, 0, 100 ]
          SpotAllocationStrategy: lowest-price
          SpotMaxPrice:
            !If [ UsingSpotInstance, !Ref SpotPrice, !Ref AWS::NoValue ]
        LaunchTemplate:
          LaunchTemplateSpecification:
            LaunchTemplateId: !Ref LaunchTemplate16
            Version: !GetAtt LaunchTemplate16.LatestVersionNumber
          Overrides:
           - Fn::If:
             - InstanceTypeProvided
             - InstanceType: !Ref InstanceType
             - InstanceRequirements:
                 MemoryMiB:
                   Min: !Ref SpotMinMemoryMiB
                 VCpuCount:
                   Min: !Ref SpotMinVCpuCount
      MaxSize: !FindInMap [ ServerState, !Ref ServerState16, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState16, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster16:
    Type: AWS::ECS::Cluster
    DependsOn: EcsCluster15
    Properties:
      ClusterName: !Sub "${AWS::StackName}-cluster-16"

  LaunchTemplate16:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${AWS::StackName}-launch-template-16
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !GetAtt InstanceProfile.Arn
        ImageId: !Ref ECSAMI
        SecurityGroupIds:
        - !Ref Ec2Sg
        KeyName:
          !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            echo ECS_CLUSTER=${EcsCluster16} >> /etc/ecs/ecs.config

  EcsService16:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster16
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState16, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-16"
      TaskDefinition: !Ref EcsTask16
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask16:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount16A
    - Mount16B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-16"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs16
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: !Sub "${AWS::StackName}-factorio-16"
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 17 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs17:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS
      FileSystemTags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-fs-17"

  Mount17A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs17
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetA

  Mount17B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs17
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetB

  # ====================================================
  # 17 - INSTANCE CONFIG
  # ====================================================

  AutoScalingGroup17:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-17"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState17, DesiredCapacity ]
      MixedInstancesPolicy:
        InstancesDistribution:
          OnDemandPercentageAboveBaseCapacity:
            !If [ UsingSpotInstance, 0, 100 ]
          SpotAllocationStrategy: lowest-price
          SpotMaxPrice:
            !If [ UsingSpotInstance, !Ref SpotPrice, !Ref AWS::NoValue ]
        LaunchTemplate:
          LaunchTemplateSpecification:
            LaunchTemplateId: !Ref LaunchTemplate17
            Version: !GetAtt LaunchTemplate17.LatestVersionNumber
          Overrides:
           - Fn::If:
             - InstanceTypeProvided
             - InstanceType: !Ref InstanceType
             - InstanceRequirements:
                 MemoryMiB:
                   Min: !Ref SpotMinMemoryMiB
                 VCpuCount:
                   Min: !Ref SpotMinVCpuCount
      MaxSize: !FindInMap [ ServerState, !Ref ServerState17, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState17, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster17:
    Type: AWS::ECS::Cluster
    DependsOn: EcsCluster16
    Properties:
      ClusterName: !Sub "${AWS::StackName}-cluster-17"

  LaunchTemplate17:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${AWS::StackName}-launch-template-17
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !GetAtt InstanceProfile.Arn
        ImageId: !Ref ECSAMI
        SecurityGroupIds:
        - !Ref Ec2Sg
        KeyName:
          !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            echo ECS_CLUSTER=${EcsCluster17} >> /etc/ecs/ecs.config

  EcsService17:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster17
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState17, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-17"
      TaskDefinition: !Ref EcsTask17
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask17:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount17A
    - Mount17B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-17"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs17
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: !Sub "${AWS::StackName}-factorio-17"
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 18 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs18:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS
      FileSystemTags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-fs-18"

  Mount18A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs18
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetA

  Mount18B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs18
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetB

  # ====================================================
  # 18 - INSTANCE CONFIG
  # ====================================================

  AutoScalingGroup18:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-18"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState18, DesiredCapacity ]
      MixedInstancesPolicy:
        InstancesDistribution:
          OnDemandPercentageAboveBaseCapacity:
            !If [ UsingSpotInstance, 0, 100 ]
          SpotAllocationStrategy: lowest-price
          SpotMaxPrice:
            !If [ UsingSpotInstance, !Ref SpotPrice, !Ref AWS::NoValue ]
        LaunchTemplate:
          LaunchTemplateSpecification:
            LaunchTemplateId: !Ref LaunchTemplate18
            Version: !GetAtt LaunchTemplate18.LatestVersionNumber
          Overrides:
           - Fn::If:
             - InstanceTypeProvided
             - InstanceType: !Ref InstanceType
             - InstanceRequirements:
                 MemoryMiB:
                   Min: !Ref SpotMinMemoryMiB
                 VCpuCount:
                   Min: !Ref SpotMinVCpuCount
      MaxSize: !FindInMap [ ServerState, !Ref ServerState18, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState18, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster18:
    Type: AWS::ECS::Cluster
    DependsOn: EcsCluster17
    Properties:
      ClusterName: !Sub "${AWS::StackName}-cluster-18"

  LaunchTemplate18:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${AWS::StackName}-launch-template-18
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !GetAtt InstanceProfile.Arn
        ImageId: !Ref ECSAMI
        SecurityGroupIds:
        - !Ref Ec2Sg
        KeyName:
          !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            echo ECS_CLUSTER=${EcsCluster18} >> /etc/ecs/ecs.config

  EcsService18:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster18
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState18, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-18"
      TaskDefinition: !Ref EcsTask18
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask18:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount18A
    - Mount18B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-18"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs18
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: !Sub "${AWS::StackName}-factorio-18"
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 19 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs19:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS
      FileSystemTags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-fs-19"

  Mount19A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs19
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetA

  Mount19B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs19
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetB

  # ====================================================
  # 19 - INSTANCE CONFIG
  # ====================================================

  AutoScalingGroup19:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-19"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState19, DesiredCapacity ]
      MixedInstancesPolicy:
        InstancesDistribution:
          OnDemandPercentageAboveBaseCapacity:
            !If [ UsingSpotInstance, 0, 100 ]
          SpotAllocationStrategy: lowest-price
          SpotMaxPrice:
            !If [ UsingSpotInstance, !Ref SpotPrice, !Ref AWS::NoValue ]
        LaunchTemplate:
          LaunchTemplateSpecification:
            LaunchTemplateId: !Ref LaunchTemplate19
            Version: !GetAtt LaunchTemplate19.LatestVersionNumber
          Overrides:
           - Fn::If:
             - InstanceTypeProvided
             - InstanceType: !Ref InstanceType
             - InstanceRequirements:
                 MemoryMiB:
                   Min: !Ref SpotMinMemoryMiB
                 VCpuCount:
                   Min: !Ref SpotMinVCpuCount
      MaxSize: !FindInMap [ ServerState, !Ref ServerState19, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState19, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster19:
    Type: AWS::ECS::Cluster
    DependsOn: EcsCluster18
    Properties:
      ClusterName: !Sub "${AWS::StackName}-cluster-19"

  LaunchTemplate19:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${AWS::StackName}-launch-template-19
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !GetAtt InstanceProfile.Arn
        ImageId: !Ref ECSAMI
        SecurityGroupIds:
        - !Ref Ec2Sg
        KeyName:
          !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            echo ECS_CLUSTER=${EcsCluster19} >> /etc/ecs/ecs.config

  EcsService19:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster19
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState19, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-19"
      TaskDefinition: !Ref EcsTask19
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask19:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount19A
    - Mount19B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-19"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs19
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: !Sub "${AWS::StackName}-factorio-19"
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 20 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs20:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS
      FileSystemTags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-fs-20"

  Mount20A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs20
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetA

  Mount20B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs20
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetB

  # ====================================================
  # 20 - INSTANCE CONFIG
  # ====================================================

  AutoScalingGroup20:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-20"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState20, DesiredCapacity ]
      MixedInstancesPolicy:
        InstancesDistribution:
          OnDemandPercentageAboveBaseCapacity:
            !If [ UsingSpotInstance, 0, 100 ]
          SpotAllocationStrategy: lowest-price
          SpotMaxPrice:
            !If [ UsingSpotInstance, !Ref SpotPrice, !Ref AWS::NoValue ]
        LaunchTemplate:
          LaunchTemplateSpecification:
            LaunchTemplateId: !Ref LaunchTemplate20
            Version: !GetAtt LaunchTemplate20.LatestVersionNumber
          Overrides:
           - Fn::If:
             - InstanceTypeProvided
             - InstanceType: !Ref InstanceType
             - InstanceRequirements:
                 MemoryMiB:
                   Min: !Ref SpotMinMemoryMiB
                 VCpuCount:
                   Min: !Ref SpotMinVCpuCount
      MaxSize: !FindInMap [ ServerState, !Ref ServerState20, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState20, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster20:
    Type: AWS::ECS::Cluster
    DependsOn: EcsCluster19
    Properties:
      ClusterName: !Sub "${AWS::StackName}-cluster-20"

  LaunchTemplate20:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${AWS::StackName}-launch-template-20
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !GetAtt InstanceProfile.Arn
        ImageId: !Ref ECSAMI
        SecurityGroupIds:
        - !Ref Ec2Sg
        KeyName:
          !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            echo ECS_CLUSTER=${EcsCluster20} >> /etc/ecs/ecs.config

  EcsService20:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster20
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState20, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-20"
      TaskDefinition: !Ref EcsTask20
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask20:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount20A
    - Mount20B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-20"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs20
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: !Sub "${AWS::StackName}-factorio-20"
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 21 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs21:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS
      FileSystemTags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-fs-21"

  Mount21A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs21
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetA

  Mount21B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs21
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetB

  # ====================================================
  # 21 - INSTANCE CONFIG
  # ====================================================

  AutoScalingGroup21:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-21"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState21, DesiredCapacity ]
      MixedInstancesPolicy:
        InstancesDistribution:
          OnDemandPercentageAboveBaseCapacity:
            !If [ UsingSpotInstance, 0, 100 ]
          SpotAllocationStrategy: lowest-price
          SpotMaxPrice:
            !If [ UsingSpotInstance, !Ref SpotPrice, !Ref AWS::NoValue ]
        LaunchTemplate:
          LaunchTemplateSpecification:
            LaunchTemplateId: !Ref LaunchTemplate21
            Version: !GetAtt LaunchTemplate21.LatestVersionNumber
          Overrides:
           - Fn::If:
             - InstanceTypeProvided
             - InstanceType: !Ref InstanceType
             - InstanceRequirements:
                 MemoryMiB:
                   Min: !Ref SpotMinMemoryMiB
                 VCpuCount:
                   Min: !Ref SpotMinVCpuCount
      MaxSize: !FindInMap [ ServerState, !Ref ServerState21, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState21, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster21:
    Type: AWS::ECS::Cluster
    DependsOn: EcsCluster20
    Properties:
      ClusterName: !Sub "${AWS::StackName}-cluster-21"

  LaunchTemplate21:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${AWS::StackName}-launch-template-21
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !GetAtt InstanceProfile.Arn
        ImageId: !Ref ECSAMI
        SecurityGroupIds:
        - !Ref Ec2Sg
        KeyName:
          !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            echo ECS_CLUSTER=${EcsCluster21} >> /etc/ecs/ecs.config

  EcsService21:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster21
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState21, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-21"
      TaskDefinition: !Ref EcsTask21
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask21:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount21A
    - Mount21B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-21"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs21
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: !Sub "${AWS::StackName}-factorio-21"
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 22 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs22:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS
      FileSystemTags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-fs-22"

  Mount22A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs22
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetA

  Mount22B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs22
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetB

  # ====================================================
  # 22 - INSTANCE CONFIG
  # ====================================================

  AutoScalingGroup22:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-22"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState22, DesiredCapacity ]
      MixedInstancesPolicy:
        InstancesDistribution:
          OnDemandPercentageAboveBaseCapacity:
            !If [ UsingSpotInstance, 0, 100 ]
          SpotAllocationStrategy: lowest-price
          SpotMaxPrice:
            !If [ UsingSpotInstance, !Ref SpotPrice, !Ref AWS::NoValue ]
        LaunchTemplate:
          LaunchTemplateSpecification:
            LaunchTemplateId: !Ref LaunchTemplate22
            Version: !GetAtt LaunchTemplate22.LatestVersionNumber
          Overrides:
           - Fn::If:
             - InstanceTypeProvided
             - InstanceType: !Ref InstanceType
             - InstanceRequirements:
                 MemoryMiB:
                   Min: !Ref SpotMinMemoryMiB
                 VCpuCount:
                   Min: !Ref SpotMinVCpuCount
      MaxSize: !FindInMap [ ServerState, !Ref ServerState22, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState22, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster22:
    Type: AWS::ECS::Cluster
    DependsOn: EcsCluster21
    Properties:
      ClusterName: !Sub "${AWS::StackName}-cluster-22"

  LaunchTemplate22:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${AWS::StackName}-launch-template-22
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !GetAtt InstanceProfile.Arn
        ImageId: !Ref ECSAMI
        SecurityGroupIds:
        - !Ref Ec2Sg
        KeyName:
          !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            echo ECS_CLUSTER=${EcsCluster22} >> /etc/ecs/ecs.config

  EcsService22:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster22
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState22, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-22"
      TaskDefinition: !Ref EcsTask22
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask22:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount22A
    - Mount22B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-22"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs22
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: !Sub "${AWS::StackName}-factorio-22"
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 23 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs23:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS
      FileSystemTags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-fs-23"

  Mount23A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs23
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetA

  Mount23B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs23
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetB

  # ====================================================
  # 23 - INSTANCE CONFIG
  # ====================================================

  AutoScalingGroup23:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-23"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState23, DesiredCapacity ]
      MixedInstancesPolicy:
        InstancesDistribution:
          OnDemandPercentageAboveBaseCapacity:
            !If [ UsingSpotInstance, 0, 100 ]
          SpotAllocationStrategy: lowest-price
          SpotMaxPrice:
            !If [ UsingSpotInstance, !Ref SpotPrice, !Ref AWS::NoValue ]
        LaunchTemplate:
          LaunchTemplateSpecification:
            LaunchTemplateId: !Ref LaunchTemplate23
            Version: !GetAtt LaunchTemplate23.LatestVersionNumber
          Overrides:
           - Fn::If:
             - InstanceTypeProvided
             - InstanceType: !Ref InstanceType
             - InstanceRequirements:
                 MemoryMiB:
                   Min: !Ref SpotMinMemoryMiB
                 VCpuCount:
                   Min: !Ref SpotMinVCpuCount
      MaxSize: !FindInMap [ ServerState, !Ref ServerState23, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState23, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster23:
    Type: AWS::ECS::Cluster
    DependsOn: EcsCluster22
    Properties:
      ClusterName: !Sub "${AWS::StackName}-cluster-23"

  LaunchTemplate23:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${AWS::StackName}-launch-template-23
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !GetAtt InstanceProfile.Arn
        ImageId: !Ref ECSAMI
        SecurityGroupIds:
        - !Ref Ec2Sg
        KeyName:
          !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            echo ECS_CLUSTER=${EcsCluster23} >> /etc/ecs/ecs.config

  EcsService23:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster23
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState23, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-23"
      TaskDefinition: !Ref EcsTask23
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask23:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount23A
    - Mount23B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-23"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs23
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: !Sub "${AWS::StackName}-factorio-23"
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 24 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs24:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS
      FileSystemTags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-fs-24"

  Mount24A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs24
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetA

  Mount24B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs24
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetB

  # ====================================================
  # 24 - INSTANCE CONFIG
  # ====================================================

  AutoScalingGroup24:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-24"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState24, DesiredCapacity ]
      MixedInstancesPolicy:
        InstancesDistribution:
          OnDemandPercentageAboveBaseCapacity:
            !If [ UsingSpotInstance, 0, 100 ]
          SpotAllocationStrategy: lowest-price
          SpotMaxPrice:
            !If [ UsingSpotInstance, !Ref SpotPrice, !Ref AWS::NoValue ]
        LaunchTemplate:
          LaunchTemplateSpecification:
            LaunchTemplateId: !Ref LaunchTemplate24
            Version: !GetAtt LaunchTemplate24.LatestVersionNumber
          Overrides:
           - Fn::If:
             - InstanceTypeProvided
             - InstanceType: !Ref InstanceType
             - InstanceRequirements:
                 MemoryMiB:
                   Min: !Ref SpotMinMemoryMiB
                 VCpuCount:
                   Min: !Ref SpotMinVCpuCount
      MaxSize: !FindInMap [ ServerState, !Ref ServerState24, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState24, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster24:
    Type: AWS::ECS::Cluster
    DependsOn: EcsCluster23
    Properties:
      ClusterName: !Sub "${AWS::StackName}-cluster-24"

  LaunchTemplate24:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${AWS::StackName}-launch-template-24
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !GetAtt InstanceProfile.Arn
        ImageId: !Ref ECSAMI
        SecurityGroupIds:
        - !Ref Ec2Sg
        KeyName:
          !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            echo ECS_CLUSTER=${EcsCluster24} >> /etc/ecs/ecs.config

  EcsService24:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster24
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState24, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-24"
      TaskDefinition: !Ref EcsTask24
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask24:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount24A
    - Mount24B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-24"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs24
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: !Sub "${AWS::StackName}-factorio-24"
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 25 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs25:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS
      FileSystemTags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-fs-25"

  Mount25A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs25
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetA

  Mount25B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs25
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetB

  # ====================================================
  # 25 - INSTANCE CONFIG
  # ====================================================

  AutoScalingGroup25:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-25"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState25, DesiredCapacity ]
      MixedInstancesPolicy:
        InstancesDistribution:
          OnDemandPercentageAboveBaseCapacity:
            !If [ UsingSpotInstance, 0, 100 ]
          SpotAllocationStrategy: lowest-price
          SpotMaxPrice:
            !If [ UsingSpotInstance, !Ref SpotPrice, !Ref AWS::NoValue ]
        LaunchTemplate:
          LaunchTemplateSpecification:
            LaunchTemplateId: !Ref LaunchTemplate25
            Version: !GetAtt LaunchTemplate25.LatestVersionNumber
          Overrides:
           - Fn::If:
             - InstanceTypeProvided
             - InstanceType: !Ref InstanceType
             - InstanceRequirements:
                 MemoryMiB:
                   Min: !Ref SpotMinMemoryMiB
                 VCpuCount:
                   Min: !Ref SpotMinVCpuCount
      MaxSize: !FindInMap [ ServerState, !Ref ServerState25, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState25, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster25:
    Type: AWS::ECS::Cluster
    DependsOn: EcsCluster24
    Properties:
      ClusterName: !Sub "${AWS::StackName}-cluster-25"

  LaunchTemplate25:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${AWS::StackName}-launch-template-25
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !GetAtt InstanceProfile.Arn
        ImageId: !Ref ECSAMI
        SecurityGroupIds:
        - !Ref Ec2Sg
        KeyName:
          !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            echo ECS_CLUSTER=${EcsCluster25} >> /etc/ecs/ecs.config

  EcsService25:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster25
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState25, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-25"
      TaskDefinition: !Ref EcsTask25
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask25:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount25A
    - Mount25B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-25"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs25
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: !Sub "${AWS::StackName}-factorio-25"
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 26 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs26:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS
      FileSystemTags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-fs-26"

  Mount26A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs26
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetA

  Mount26B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs26
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetB

  # ====================================================
  # 26 - INSTANCE CONFIG
  # ====================================================

  AutoScalingGroup26:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-26"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState26, DesiredCapacity ]
      MixedInstancesPolicy:
        InstancesDistribution:
          OnDemandPercentageAboveBaseCapacity:
            !If [ UsingSpotInstance, 0, 100 ]
          SpotAllocationStrategy: lowest-price
          SpotMaxPrice:
            !If [ UsingSpotInstance, !Ref SpotPrice, !Ref AWS::NoValue ]
        LaunchTemplate:
          LaunchTemplateSpecification:
            LaunchTemplateId: !Ref LaunchTemplate26
            Version: !GetAtt LaunchTemplate26.LatestVersionNumber
          Overrides:
           - Fn::If:
             - InstanceTypeProvided
             - InstanceType: !Ref InstanceType
             - InstanceRequirements:
                 MemoryMiB:
                   Min: !Ref SpotMinMemoryMiB
                 VCpuCount:
                   Min: !Ref SpotMinVCpuCount
      MaxSize: !FindInMap [ ServerState, !Ref ServerState26, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState26, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster26:
    Type: AWS::ECS::Cluster
    DependsOn: EcsCluster25
    Properties:
      ClusterName: !Sub "${AWS::StackName}-cluster-26"

  LaunchTemplate26:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${AWS::StackName}-launch-template-26
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !GetAtt InstanceProfile.Arn
        ImageId: !Ref ECSAMI
        SecurityGroupIds:
        - !Ref Ec2Sg
        KeyName:
          !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            echo ECS_CLUSTER=${EcsCluster26} >> /etc/ecs/ecs.config

  EcsService26:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster26
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState26, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-26"
      TaskDefinition: !Ref EcsTask26
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask26:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount26A
    - Mount26B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-26"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs26
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: !Sub "${AWS::StackName}-factorio-26"
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 27 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs27:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS
      FileSystemTags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-fs-27"

  Mount27A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs27
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetA

  Mount27B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs27
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetB

  # ====================================================
  # 27 - INSTANCE CONFIG
  # ====================================================

  AutoScalingGroup27:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-27"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState27, DesiredCapacity ]
      MixedInstancesPolicy:
        InstancesDistribution:
          OnDemandPercentageAboveBaseCapacity:
            !If [ UsingSpotInstance, 0, 100 ]
          SpotAllocationStrategy: lowest-price
          SpotMaxPrice:
            !If [ UsingSpotInstance, !Ref SpotPrice, !Ref AWS::NoValue ]
        LaunchTemplate:
          LaunchTemplateSpecification:
            LaunchTemplateId: !Ref LaunchTemplate27
            Version: !GetAtt LaunchTemplate27.LatestVersionNumber
          Overrides:
           - Fn::If:
             - InstanceTypeProvided
             - InstanceType: !Ref InstanceType
             - InstanceRequirements:
                 MemoryMiB:
                   Min: !Ref SpotMinMemoryMiB
                 VCpuCount:
                   Min: !Ref SpotMinVCpuCount
      MaxSize: !FindInMap [ ServerState, !Ref ServerState27, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState27, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster27:
    Type: AWS::ECS::Cluster
    DependsOn: EcsCluster26
    Properties:
      ClusterName: !Sub "${AWS::StackName}-cluster-27"

  LaunchTemplate27:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${AWS::StackName}-launch-template-27
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !GetAtt InstanceProfile.Arn
        ImageId: !Ref ECSAMI
        SecurityGroupIds:
        - !Ref Ec2Sg
        KeyName:
          !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            echo ECS_CLUSTER=${EcsCluster27} >> /etc/ecs/ecs.config

  EcsService27:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster27
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState27, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-27"
      TaskDefinition: !Ref EcsTask27
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask27:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount27A
    - Mount27B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-27"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs27
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: !Sub "${AWS::StackName}-factorio-27"
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 28 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs28:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS
      FileSystemTags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-fs-28"

  Mount28A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs28
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetA

  Mount28B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs28
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetB

  # ====================================================
  # 28 - INSTANCE CONFIG
  # ====================================================

  AutoScalingGroup28:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-28"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState28, DesiredCapacity ]
      MixedInstancesPolicy:
        InstancesDistribution:
          OnDemandPercentageAboveBaseCapacity:
            !If [ UsingSpotInstance, 0, 100 ]
          SpotAllocationStrategy: lowest-price
          SpotMaxPrice:
            !If [ UsingSpotInstance, !Ref SpotPrice, !Ref AWS::NoValue ]
        LaunchTemplate:
          LaunchTemplateSpecification:
            LaunchTemplateId: !Ref LaunchTemplate28
            Version: !GetAtt LaunchTemplate28.LatestVersionNumber
          Overrides:
           - Fn::If:
             - InstanceTypeProvided
             - InstanceType: !Ref InstanceType
             - InstanceRequirements:
                 MemoryMiB:
                   Min: !Ref SpotMinMemoryMiB
                 VCpuCount:
                   Min: !Ref SpotMinVCpuCount
      MaxSize: !FindInMap [ ServerState, !Ref ServerState28, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState28, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster28:
    Type: AWS::ECS::Cluster
    DependsOn: EcsCluster27
    Properties:
      ClusterName: !Sub "${AWS::StackName}-cluster-28"

  LaunchTemplate28:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${AWS::StackName}-launch-template-28
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !GetAtt InstanceProfile.Arn
        ImageId: !Ref ECSAMI
        SecurityGroupIds:
        - !Ref Ec2Sg
        KeyName:
          !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            echo ECS_CLUSTER=${EcsCluster28} >> /etc/ecs/ecs.config

  EcsService28:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster28
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState28, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-28"
      TaskDefinition: !Ref EcsTask28
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask28:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount28A
    - Mount28B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-28"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs28
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: !Sub "${AWS::StackName}-factorio-28"
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 29 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs29:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS
      FileSystemTags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-fs-29"

  Mount29A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs29
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetA

  Mount29B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs29
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetB

  # ====================================================
  # 29 - INSTANCE CONFIG
  # ====================================================

  AutoScalingGroup29:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-29"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState29, DesiredCapacity ]
      MixedInstancesPolicy:
        InstancesDistribution:
          OnDemandPercentageAboveBaseCapacity:
            !If [ UsingSpotInstance, 0, 100 ]
          SpotAllocationStrategy: lowest-price
          SpotMaxPrice:
            !If [ UsingSpotInstance, !Ref SpotPrice, !Ref AWS::NoValue ]
        LaunchTemplate:
          LaunchTemplateSpecification:
            LaunchTemplateId: !Ref LaunchTemplate29
            Version: !GetAtt LaunchTemplate29.LatestVersionNumber
          Overrides:
           - Fn::If:
             - InstanceTypeProvided
             - InstanceType: !Ref InstanceType
             - InstanceRequirements:
                 MemoryMiB:
                   Min: !Ref SpotMinMemoryMiB
                 VCpuCount:
                   Min: !Ref SpotMinVCpuCount
      MaxSize: !FindInMap [ ServerState, !Ref ServerState29, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState29, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster29:
    Type: AWS::ECS::Cluster
    DependsOn: EcsCluster28
    Properties:
      ClusterName: !Sub "${AWS::StackName}-cluster-29"

  LaunchTemplate29:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${AWS::StackName}-launch-template-29
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !GetAtt InstanceProfile.Arn
        ImageId: !Ref ECSAMI
        SecurityGroupIds:
        - !Ref Ec2Sg
        KeyName:
          !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            echo ECS_CLUSTER=${EcsCluster29} >> /etc/ecs/ecs.config

  EcsService29:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster29
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState29, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-29"
      TaskDefinition: !Ref EcsTask29
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask29:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount29A
    - Mount29B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-29"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs29
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: !Sub "${AWS::StackName}-factorio-29"
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 30 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs30:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS
      FileSystemTags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-fs-30"

  Mount30A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs30
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetA

  Mount30B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs30
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetB

  # ====================================================
  # 30 - INSTANCE CONFIG
  # ====================================================

  AutoScalingGroup30:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-30"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState30, DesiredCapacity ]
      MixedInstancesPolicy:
        InstancesDistribution:
          OnDemandPercentageAboveBaseCapacity:
            !If [ UsingSpotInstance, 0, 100 ]
          SpotAllocationStrategy: lowest-price
          SpotMaxPrice:
            !If [ UsingSpotInstance, !Ref SpotPrice, !Ref AWS::NoValue ]
        LaunchTemplate:
          LaunchTemplateSpecification:
            LaunchTemplateId: !Ref LaunchTemplate30
            Version: !GetAtt LaunchTemplate30.LatestVersionNumber
          Overrides:
           - Fn::If:
             - InstanceTypeProvided
             - InstanceType: !Ref InstanceType
             - InstanceRequirements:
                 MemoryMiB:
                   Min: !Ref SpotMinMemoryMiB
                 VCpuCount:
                   Min: !Ref SpotMinVCpuCount
      MaxSize: !FindInMap [ ServerState, !Ref ServerState30, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState30, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster30:
    Type: AWS::ECS::Cluster
    DependsOn: EcsCluster29
    Properties:
      ClusterName: !Sub "${AWS::StackName}-cluster-30"

  LaunchTemplate30:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${AWS::StackName}-launch-template-30
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !GetAtt InstanceProfile.Arn
        ImageId: !Ref ECSAMI
        SecurityGroupIds:
        - !Ref Ec2Sg
        KeyName:
          !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            echo ECS_CLUSTER=${EcsCluster30} >> /etc/ecs/ecs.config

  EcsService30:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster30
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState30, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-30"
      TaskDefinition: !Ref EcsTask30
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask30:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount30A
    - Mount30B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-30"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs30
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: !Sub "${AWS::StackName}-factorio-30"
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 31 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs31:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS
      FileSystemTags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-fs-31"

  Mount31A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs31
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetA

  Mount31B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs31
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetB

  # ====================================================
  # 31 - INSTANCE CONFIG
  # ====================================================

  AutoScalingGroup31:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-31"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState31, DesiredCapacity ]
      MixedInstancesPolicy:
        InstancesDistribution:
          OnDemandPercentageAboveBaseCapacity:
            !If [ UsingSpotInstance, 0, 100 ]
          SpotAllocationStrategy: lowest-price
          SpotMaxPrice:
            !If [ UsingSpotInstance, !Ref SpotPrice, !Ref AWS::NoValue ]
        LaunchTemplate:
          LaunchTemplateSpecification:
            LaunchTemplateId: !Ref LaunchTemplate31
            Version: !GetAtt LaunchTemplate31.LatestVersionNumber
          Overrides:
           - Fn::If:
             - InstanceTypeProvided
             - InstanceType: !Ref InstanceType
             - InstanceRequirements:
                 MemoryMiB:
                   Min: !Ref SpotMinMemoryMiB
                 VCpuCount:
                   Min: !Ref SpotMinVCpuCount
      MaxSize: !FindInMap [ ServerState, !Ref ServerState31, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState31, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster31:
    Type: AWS::ECS::Cluster
    DependsOn: EcsCluster30
    Properties:
      ClusterName: !Sub "${AWS::StackName}-cluster-31"

  LaunchTemplate31:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${AWS::StackName}-launch-template-31
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !GetAtt InstanceProfile.Arn
        ImageId: !Ref ECSAMI
        SecurityGroupIds:
        - !Ref Ec2Sg
        KeyName:
          !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            echo ECS_CLUSTER=${EcsCluster31} >> /etc/ecs/ecs.config

  EcsService31:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster31
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState31, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-31"
      TaskDefinition: !Ref EcsTask31
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask31:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount31A
    - Mount31B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-31"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs31
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: !Sub "${AWS::StackName}-factorio-31"
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 32 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs32:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS
      FileSystemTags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-fs-32"

  Mount32A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs32
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetA

  Mount32B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs32
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetB

  # ====================================================
  # 32 - INSTANCE CONFIG
  # ====================================================

  AutoScalingGroup32:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-32"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState32, DesiredCapacity ]
      MixedInstancesPolicy:
        InstancesDistribution:
          OnDemandPercentageAboveBaseCapacity:
            !If [ UsingSpotInstance, 0, 100 ]
          SpotAllocationStrategy: lowest-price
          SpotMaxPrice:
            !If [ UsingSpotInstance, !Ref SpotPrice, !Ref AWS::NoValue ]
        LaunchTemplate:
          LaunchTemplateSpecification:
            LaunchTemplateId: !Ref LaunchTemplate32
            Version: !GetAtt LaunchTemplate32.LatestVersionNumber
          Overrides:
           - Fn::If:
             - InstanceTypeProvided
             - InstanceType: !Ref InstanceType
             - InstanceRequirements:
                 MemoryMiB:
                   Min: !Ref SpotMinMemoryMiB
                 VCpuCount:
                   Min: !Ref SpotMinVCpuCount
      MaxSize: !FindInMap [ ServerState, !Ref ServerState32, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState32, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster32:
    Type: AWS::ECS::Cluster
    DependsOn: EcsCluster31
    Properties:
      ClusterName: !Sub "${AWS::StackName}-cluster-32"

  LaunchTemplate32:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${AWS::StackName}-launch-template-32
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !GetAtt InstanceProfile.Arn
        ImageId: !Ref ECSAMI
        SecurityGroupIds:
        - !Ref Ec2Sg
        KeyName:
          !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            echo ECS_CLUSTER=${EcsCluster32} >> /etc/ecs/ecs.config

  EcsService32:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster32
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState32, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-32"
      TaskDefinition: !Ref EcsTask32
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask32:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount32A
    - Mount32B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-32"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs32
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: !Sub "${AWS::StackName}-factorio-32"
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 33 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs33:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS
      FileSystemTags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-fs-33"

  Mount33A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs33
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetA

  Mount33B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs33
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetB

  # ====================================================
  # 33 - INSTANCE CONFIG
  # ====================================================

  AutoScalingGroup33:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-33"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState33, DesiredCapacity ]
      MixedInstancesPolicy:
        InstancesDistribution:
          OnDemandPercentageAboveBaseCapacity:
            !If [ UsingSpotInstance, 0, 100 ]
          SpotAllocationStrategy: lowest-price
          SpotMaxPrice:
            !If [ UsingSpotInstance, !Ref SpotPrice, !Ref AWS::NoValue ]
        LaunchTemplate:
          LaunchTemplateSpecification:
            LaunchTemplateId: !Ref LaunchTemplate33
            Version: !GetAtt LaunchTemplate33.LatestVersionNumber
          Overrides:
           - Fn::If:
             - InstanceTypeProvided
             - InstanceType: !Ref InstanceType
             - InstanceRequirements:
                 MemoryMiB:
                   Min: !Ref SpotMinMemoryMiB
                 VCpuCount:
                   Min: !Ref SpotMinVCpuCount
      MaxSize: !FindInMap [ ServerState, !Ref ServerState33, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState33, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster33:
    Type: AWS::ECS::Cluster
    DependsOn: EcsCluster32
    Properties:
      ClusterName: !Sub "${AWS::StackName}-cluster-33"

  LaunchTemplate33:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${AWS::StackName}-launch-template-33
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !GetAtt InstanceProfile.Arn
        ImageId: !Ref ECSAMI
        SecurityGroupIds:
        - !Ref Ec2Sg
        KeyName:
          !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            echo ECS_CLUSTER=${EcsCluster33} >> /etc/ecs/ecs.config

  EcsService33:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster33
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState33, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-33"
      TaskDefinition: !Ref EcsTask33
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask33:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount33A
    - Mount33B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-33"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs33
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: !Sub "${AWS::StackName}-factorio-33"
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 34 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs34:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS
      FileSystemTags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-fs-34"

  Mount34A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs34
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetA

  Mount34B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs34
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetB

  # ====================================================
  # 34 - INSTANCE CONFIG
  # ====================================================

  AutoScalingGroup34:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-34"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState34, DesiredCapacity ]
      MixedInstancesPolicy:
        InstancesDistribution:
          OnDemandPercentageAboveBaseCapacity:
            !If [ UsingSpotInstance, 0, 100 ]
          SpotAllocationStrategy: lowest-price
          SpotMaxPrice:
            !If [ UsingSpotInstance, !Ref SpotPrice, !Ref AWS::NoValue ]
        LaunchTemplate:
          LaunchTemplateSpecification:
            LaunchTemplateId: !Ref LaunchTemplate34
            Version: !GetAtt LaunchTemplate34.LatestVersionNumber
          Overrides:
           - Fn::If:
             - InstanceTypeProvided
             - InstanceType: !Ref InstanceType
             - InstanceRequirements:
                 MemoryMiB:
                   Min: !Ref SpotMinMemoryMiB
                 VCpuCount:
                   Min: !Ref SpotMinVCpuCount
      MaxSize: !FindInMap [ ServerState, !Ref ServerState34, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState34, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster34:
    Type: AWS::ECS::Cluster
    DependsOn: EcsCluster33
    Properties:
      ClusterName: !Sub "${AWS::StackName}-cluster-34"

  LaunchTemplate34:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${AWS::StackName}-launch-template-34
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !GetAtt InstanceProfile.Arn
        ImageId: !Ref ECSAMI
        SecurityGroupIds:
        - !Ref Ec2Sg
        KeyName:
          !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            echo ECS_CLUSTER=${EcsCluster34} >> /etc/ecs/ecs.config

  EcsService34:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster34
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState34, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-34"
      TaskDefinition: !Ref EcsTask34
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask34:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount34A
    - Mount34B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-34"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs34
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: !Sub "${AWS::StackName}-factorio-34"
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 35 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs35:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS
      FileSystemTags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-fs-35"

  Mount35A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs35
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetA

  Mount35B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs35
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetB

  # ====================================================
  # 35 - INSTANCE CONFIG
  # ====================================================

  AutoScalingGroup35:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-35"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState35, DesiredCapacity ]
      MixedInstancesPolicy:
        InstancesDistribution:
          OnDemandPercentageAboveBaseCapacity:
            !If [ UsingSpotInstance, 0, 100 ]
          SpotAllocationStrategy: lowest-price
          SpotMaxPrice:
            !If [ UsingSpotInstance, !Ref SpotPrice, !Ref AWS::NoValue ]
        LaunchTemplate:
          LaunchTemplateSpecification:
            LaunchTemplateId: !Ref LaunchTemplate35
            Version: !GetAtt LaunchTemplate35.LatestVersionNumber
          Overrides:
           - Fn::If:
             - InstanceTypeProvided
             - InstanceType: !Ref InstanceType
             - InstanceRequirements:
                 MemoryMiB:
                   Min: !Ref SpotMinMemoryMiB
                 VCpuCount:
                   Min: !Ref SpotMinVCpuCount
      MaxSize: !FindInMap [ ServerState, !Ref ServerState35, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState35, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster35:
    Type: AWS::ECS::Cluster
    DependsOn: EcsCluster34
    Properties:
      ClusterName: !Sub "${AWS::StackName}-cluster-35"

  LaunchTemplate35:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${AWS::StackName}-launch-template-35
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !GetAtt InstanceProfile.Arn
        ImageId: !Ref ECSAMI
        SecurityGroupIds:
        - !Ref Ec2Sg
        KeyName:
          !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            echo ECS_CLUSTER=${EcsCluster35} >> /etc/ecs/ecs.config

  EcsService35:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster35
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState35, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-35"
      TaskDefinition: !Ref EcsTask35
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask35:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount35A
    - Mount35B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-35"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs35
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: !Sub "${AWS::StackName}-factorio-35"
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 36 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs36:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS
      FileSystemTags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-fs-36"

  Mount36A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs36
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetA

  Mount36B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs36
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetB

  # ====================================================
  # 36 - INSTANCE CONFIG
  # ====================================================

  AutoScalingGroup36:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-36"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState36, DesiredCapacity ]
      MixedInstancesPolicy:
        InstancesDistribution:
          OnDemandPercentageAboveBaseCapacity:
            !If [ UsingSpotInstance, 0, 100 ]
          SpotAllocationStrategy: lowest-price
          SpotMaxPrice:
            !If [ UsingSpotInstance, !Ref SpotPrice, !Ref AWS::NoValue ]
        LaunchTemplate:
          LaunchTemplateSpecification:
            LaunchTemplateId: !Ref LaunchTemplate36
            Version: !GetAtt LaunchTemplate36.LatestVersionNumber
          Overrides:
           - Fn::If:
             - InstanceTypeProvided
             - InstanceType: !Ref InstanceType
             - InstanceRequirements:
                 MemoryMiB:
                   Min: !Ref SpotMinMemoryMiB
                 VCpuCount:
                   Min: !Ref SpotMinVCpuCount
      MaxSize: !FindInMap [ ServerState, !Ref ServerState36, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState36, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster36:
    Type: AWS::ECS::Cluster
    DependsOn: EcsCluster35
    Properties:
      ClusterName: !Sub "${AWS::StackName}-cluster-36"

  LaunchTemplate36:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${AWS::StackName}-launch-template-36
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !GetAtt InstanceProfile.Arn
        ImageId: !Ref ECSAMI
        SecurityGroupIds:
        - !Ref Ec2Sg
        KeyName:
          !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            echo ECS_CLUSTER=${EcsCluster36} >> /etc/ecs/ecs.config

  EcsService36:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster36
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState36, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-36"
      TaskDefinition: !Ref EcsTask36
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask36:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount36A
    - Mount36B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-36"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs36
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: !Sub "${AWS::StackName}-factorio-36"
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 37 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs37:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS
      FileSystemTags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-fs-37"

  Mount37A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs37
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetA

  Mount37B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs37
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetB

  # ====================================================
  # 37 - INSTANCE CONFIG
  # ====================================================

  AutoScalingGroup37:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-37"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState37, DesiredCapacity ]
      MixedInstancesPolicy:
        InstancesDistribution:
          OnDemandPercentageAboveBaseCapacity:
            !If [ UsingSpotInstance, 0, 100 ]
          SpotAllocationStrategy: lowest-price
          SpotMaxPrice:
            !If [ UsingSpotInstance, !Ref SpotPrice, !Ref AWS::NoValue ]
        LaunchTemplate:
          LaunchTemplateSpecification:
            LaunchTemplateId: !Ref LaunchTemplate37
            Version: !GetAtt LaunchTemplate37.LatestVersionNumber
          Overrides:
           - Fn::If:
             - InstanceTypeProvided
             - InstanceType: !Ref InstanceType
             - InstanceRequirements:
                 MemoryMiB:
                   Min: !Ref SpotMinMemoryMiB
                 VCpuCount:
                   Min: !Ref SpotMinVCpuCount
      MaxSize: !FindInMap [ ServerState, !Ref ServerState37, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState37, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster37:
    Type: AWS::ECS::Cluster
    DependsOn: EcsCluster36
    Properties:
      ClusterName: !Sub "${AWS::StackName}-cluster-37"

  LaunchTemplate37:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${AWS::StackName}-launch-template-37
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !GetAtt InstanceProfile.Arn
        ImageId: !Ref ECSAMI
        SecurityGroupIds:
        - !Ref Ec2Sg
        KeyName:
          !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            echo ECS_CLUSTER=${EcsCluster37} >> /etc/ecs/ecs.config

  EcsService37:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster37
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState37, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-37"
      TaskDefinition: !Ref EcsTask37
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask37:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount37A
    - Mount37B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-37"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs37
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: !Sub "${AWS::StackName}-factorio-37"
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 38 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs38:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS
      FileSystemTags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-fs-38"

  Mount38A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs38
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetA

  Mount38B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs38
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetB

  # ====================================================
  # 38 - INSTANCE CONFIG
  # ====================================================

  AutoScalingGroup38:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-38"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState38, DesiredCapacity ]
      MixedInstancesPolicy:
        InstancesDistribution:
          OnDemandPercentageAboveBaseCapacity:
            !If [ UsingSpotInstance, 0, 100 ]
          SpotAllocationStrategy: lowest-price
          SpotMaxPrice:
            !If [ UsingSpotInstance, !Ref SpotPrice, !Ref AWS::NoValue ]
        LaunchTemplate:
          LaunchTemplateSpecification:
            LaunchTemplateId: !Ref LaunchTemplate38
            Version: !GetAtt LaunchTemplate38.LatestVersionNumber
          Overrides:
           - Fn::If:
             - InstanceTypeProvided
             - InstanceType: !Ref InstanceType
             - InstanceRequirements:
                 MemoryMiB:
                   Min: !Ref SpotMinMemoryMiB
                 VCpuCount:
                   Min: !Ref SpotMinVCpuCount
      MaxSize: !FindInMap [ ServerState, !Ref ServerState38, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState38, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster38:
    Type: AWS::ECS::Cluster
    DependsOn: EcsCluster37
    Properties:
      ClusterName: !Sub "${AWS::StackName}-cluster-38"

  LaunchTemplate38:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${AWS::StackName}-launch-template-38
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !GetAtt InstanceProfile.Arn
        ImageId: !Ref ECSAMI
        SecurityGroupIds:
        - !Ref Ec2Sg
        KeyName:
          !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            echo ECS_CLUSTER=${EcsCluster38} >> /etc/ecs/ecs.config

  EcsService38:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster38
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState38, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-38"
      TaskDefinition: !Ref EcsTask38
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask38:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount38A
    - Mount38B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-38"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs38
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: !Sub "${AWS::StackName}-factorio-38"
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 39 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs39:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS
      FileSystemTags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-fs-39"

  Mount39A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs39
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetA

  Mount39B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs39
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetB

  # ====================================================
  # 39 - INSTANCE CONFIG
  # ====================================================

  AutoScalingGroup39:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-39"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState39, DesiredCapacity ]
      MixedInstancesPolicy:
        InstancesDistribution:
          OnDemandPercentageAboveBaseCapacity:
            !If [ UsingSpotInstance, 0, 100 ]
          SpotAllocationStrategy: lowest-price
          SpotMaxPrice:
            !If [ UsingSpotInstance, !Ref SpotPrice, !Ref AWS::NoValue ]
        LaunchTemplate:
          LaunchTemplateSpecification:
            LaunchTemplateId: !Ref LaunchTemplate39
            Version: !GetAtt LaunchTemplate39.LatestVersionNumber
          Overrides:
           - Fn::If:
             - InstanceTypeProvided
             - InstanceType: !Ref InstanceType
             - InstanceRequirements:
                 MemoryMiB:
                   Min: !Ref SpotMinMemoryMiB
                 VCpuCount:
                   Min: !Ref SpotMinVCpuCount
      MaxSize: !FindInMap [ ServerState, !Ref ServerState39, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState39, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster39:
    Type: AWS::ECS::Cluster
    DependsOn: EcsCluster38
    Properties:
      ClusterName: !Sub "${AWS::StackName}-cluster-39"

  LaunchTemplate39:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${AWS::StackName}-launch-template-39
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !GetAtt InstanceProfile.Arn
        ImageId: !Ref ECSAMI
        SecurityGroupIds:
        - !Ref Ec2Sg
        KeyName:
          !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            echo ECS_CLUSTER=${EcsCluster39} >> /etc/ecs/ecs.config

  EcsService39:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster39
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState39, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-39"
      TaskDefinition: !Ref EcsTask39
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask39:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount39A
    - Mount39B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-39"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs39
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: !Sub "${AWS::StackName}-factorio-39"
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 40 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs40:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS
      FileSystemTags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-fs-40"

  Mount40A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs40
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetA

  Mount40B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs40
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetB

  # ====================================================
  # 40 - INSTANCE CONFIG
  # ====================================================

  AutoScalingGroup40:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-40"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState40, DesiredCapacity ]
      MixedInstancesPolicy:
        InstancesDistribution:
          OnDemandPercentageAboveBaseCapacity:
            !If [ UsingSpotInstance, 0, 100 ]
          SpotAllocationStrategy: lowest-price
          SpotMaxPrice:
            !If [ UsingSpotInstance, !Ref SpotPrice, !Ref AWS::NoValue ]
        LaunchTemplate:
          LaunchTemplateSpecification:
            LaunchTemplateId: !Ref LaunchTemplate40
            Version: !GetAtt LaunchTemplate40.LatestVersionNumber
          Overrides:
           - Fn::If:
             - InstanceTypeProvided
             - InstanceType: !Ref InstanceType
             - InstanceRequirements:
                 MemoryMiB:
                   Min: !Ref SpotMinMemoryMiB
                 VCpuCount:
                   Min: !Ref SpotMinVCpuCount
      MaxSize: !FindInMap [ ServerState, !Ref ServerState40, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState40, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster40:
    Type: AWS::ECS::Cluster
    DependsOn: EcsCluster39
    Properties:
      ClusterName: !Sub "${AWS::StackName}-cluster-40"

  LaunchTemplate40:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${AWS::StackName}-launch-template-40
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !GetAtt InstanceProfile.Arn
        ImageId: !Ref ECSAMI
        SecurityGroupIds:
        - !Ref Ec2Sg
        KeyName:
          !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            echo ECS_CLUSTER=${EcsCluster40} >> /etc/ecs/ecs.config

  EcsService40:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster40
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState40, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-40"
      TaskDefinition: !Ref EcsTask40
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask40:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount40A
    - Mount40B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-40"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs40
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: !Sub "${AWS::StackName}-factorio-40"
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 41 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs41:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS
      FileSystemTags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-fs-41"

  Mount41A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs41
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetA

  Mount41B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs41
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetB

  # ====================================================
  # 41 - INSTANCE CONFIG
  # ====================================================

  AutoScalingGroup41:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-41"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState41, DesiredCapacity ]
      MixedInstancesPolicy:
        InstancesDistribution:
          OnDemandPercentageAboveBaseCapacity:
            !If [ UsingSpotInstance, 0, 100 ]
          SpotAllocationStrategy: lowest-price
          SpotMaxPrice:
            !If [ UsingSpotInstance, !Ref SpotPrice, !Ref AWS::NoValue ]
        LaunchTemplate:
          LaunchTemplateSpecification:
            LaunchTemplateId: !Ref LaunchTemplate41
            Version: !GetAtt LaunchTemplate41.LatestVersionNumber
          Overrides:
           - Fn::If:
             - InstanceTypeProvided
             - InstanceType: !Ref InstanceType
             - InstanceRequirements:
                 MemoryMiB:
                   Min: !Ref SpotMinMemoryMiB
                 VCpuCount:
                   Min: !Ref SpotMinVCpuCount
      MaxSize: !FindInMap [ ServerState, !Ref ServerState41, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState41, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster41:
    Type: AWS::ECS::Cluster
    DependsOn: EcsCluster40
    Properties:
      ClusterName: !Sub "${AWS::StackName}-cluster-41"

  LaunchTemplate41:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${AWS::StackName}-launch-template-41
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !GetAtt InstanceProfile.Arn
        ImageId: !Ref ECSAMI
        SecurityGroupIds:
        - !Ref Ec2Sg
        KeyName:
          !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            echo ECS_CLUSTER=${EcsCluster41} >> /etc/ecs/ecs.config

  EcsService41:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster41
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState41, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-41"
      TaskDefinition: !Ref EcsTask41
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask41:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount41A
    - Mount41B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-41"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs41
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: !Sub "${AWS::StackName}-factorio-41"
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 42 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs42:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS
      FileSystemTags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-fs-42"

  Mount42A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs42
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetA

  Mount42B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs42
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetB

  # ====================================================
  # 42 - INSTANCE CONFIG
  # ====================================================

  AutoScalingGroup42:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-42"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState42, DesiredCapacity ]
      MixedInstancesPolicy:
        InstancesDistribution:
          OnDemandPercentageAboveBaseCapacity:
            !If [ UsingSpotInstance, 0, 100 ]
          SpotAllocationStrategy: lowest-price
          SpotMaxPrice:
            !If [ UsingSpotInstance, !Ref SpotPrice, !Ref AWS::NoValue ]
        LaunchTemplate:
          LaunchTemplateSpecification:
            LaunchTemplateId: !Ref LaunchTemplate42
            Version: !GetAtt LaunchTemplate42.LatestVersionNumber
          Overrides:
           - Fn::If:
             - InstanceTypeProvided
             - InstanceType: !Ref InstanceType
             - InstanceRequirements:
                 MemoryMiB:
                   Min: !Ref SpotMinMemoryMiB
                 VCpuCount:
                   Min: !Ref SpotMinVCpuCount
      MaxSize: !FindInMap [ ServerState, !Ref ServerState42, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState42, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster42:
    Type: AWS::ECS::Cluster
    DependsOn: EcsCluster41
    Properties:
      ClusterName: !Sub "${AWS::StackName}-cluster-42"

  LaunchTemplate42:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${AWS::StackName}-launch-template-42
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !GetAtt InstanceProfile.Arn
        ImageId: !Ref ECSAMI
        SecurityGroupIds:
        - !Ref Ec2Sg
        KeyName:
          !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            echo ECS_CLUSTER=${EcsCluster42} >> /etc/ecs/ecs.config

  EcsService42:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster42
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState42, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-42"
      TaskDefinition: !Ref EcsTask42
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask42:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount42A
    - Mount42B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-42"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs42
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: !Sub "${AWS::StackName}-factorio-42"
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 43 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs43:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS
      FileSystemTags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-fs-43"

  Mount43A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs43
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetA

  Mount43B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs43
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetB

  # ====================================================
  # 43 - INSTANCE CONFIG
  # ====================================================

  AutoScalingGroup43:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-43"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState43, DesiredCapacity ]
      MixedInstancesPolicy:
        InstancesDistribution:
          OnDemandPercentageAboveBaseCapacity:
            !If [ UsingSpotInstance, 0, 100 ]
          SpotAllocationStrategy: lowest-price
          SpotMaxPrice:
            !If [ UsingSpotInstance, !Ref SpotPrice, !Ref AWS::NoValue ]
        LaunchTemplate:
          LaunchTemplateSpecification:
            LaunchTemplateId: !Ref LaunchTemplate43
            Version: !GetAtt LaunchTemplate43.LatestVersionNumber
          Overrides:
           - Fn::If:
             - InstanceTypeProvided
             - InstanceType: !Ref InstanceType
             - InstanceRequirements:
                 MemoryMiB:
                   Min: !Ref SpotMinMemoryMiB
                 VCpuCount:
                   Min: !Ref SpotMinVCpuCount
      MaxSize: !FindInMap [ ServerState, !Ref ServerState43, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState43, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster43:
    Type: AWS::ECS::Cluster
    DependsOn: EcsCluster42
    Properties:
      ClusterName: !Sub "${AWS::StackName}-cluster-43"

  LaunchTemplate43:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${AWS::StackName}-launch-template-43
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !GetAtt InstanceProfile.Arn
        ImageId: !Ref ECSAMI
        SecurityGroupIds:
        - !Ref Ec2Sg
        KeyName:
          !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            echo ECS_CLUSTER=${EcsCluster43} >> /etc/ecs/ecs.config

  EcsService43:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster43
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState43, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-43"
      TaskDefinition: !Ref EcsTask43
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask43:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount43A
    - Mount43B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-43"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs43
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: !Sub "${AWS::StackName}-factorio-43"
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 44 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs44:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS
      FileSystemTags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-fs-44"

  Mount44A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs44
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetA

  Mount44B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs44
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetB

  # ====================================================
  # 44 - INSTANCE CONFIG
  # ====================================================

  AutoScalingGroup44:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-44"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState44, DesiredCapacity ]
      MixedInstancesPolicy:
        InstancesDistribution:
          OnDemandPercentageAboveBaseCapacity:
            !If [ UsingSpotInstance, 0, 100 ]
          SpotAllocationStrategy: lowest-price
          SpotMaxPrice:
            !If [ UsingSpotInstance, !Ref SpotPrice, !Ref AWS::NoValue ]
        LaunchTemplate:
          LaunchTemplateSpecification:
            LaunchTemplateId: !Ref LaunchTemplate44
            Version: !GetAtt LaunchTemplate44.LatestVersionNumber
          Overrides:
           - Fn::If:
             - InstanceTypeProvided
             - InstanceType: !Ref InstanceType
             - InstanceRequirements:
                 MemoryMiB:
                   Min: !Ref SpotMinMemoryMiB
                 VCpuCount:
                   Min: !Ref SpotMinVCpuCount
      MaxSize: !FindInMap [ ServerState, !Ref ServerState44, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState44, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster44:
    Type: AWS::ECS::Cluster
    DependsOn: EcsCluster43
    Properties:
      ClusterName: !Sub "${AWS::StackName}-cluster-44"

  LaunchTemplate44:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${AWS::StackName}-launch-template-44
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !GetAtt InstanceProfile.Arn
        ImageId: !Ref ECSAMI
        SecurityGroupIds:
        - !Ref Ec2Sg
        KeyName:
          !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            echo ECS_CLUSTER=${EcsCluster44} >> /etc/ecs/ecs.config

  EcsService44:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster44
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState44, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-44"
      TaskDefinition: !Ref EcsTask44
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask44:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount44A
    - Mount44B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-44"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs44
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: !Sub "${AWS::StackName}-factorio-44"
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 45 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs45:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS
      FileSystemTags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-fs-45"

  Mount45A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs45
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetA

  Mount45B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs45
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetB

  # ====================================================
  # 45 - INSTANCE CONFIG
  # ====================================================

  AutoScalingGroup45:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-45"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState45, DesiredCapacity ]
      MixedInstancesPolicy:
        InstancesDistribution:
          OnDemandPercentageAboveBaseCapacity:
            !If [ UsingSpotInstance, 0, 100 ]
          SpotAllocationStrategy: lowest-price
          SpotMaxPrice:
            !If [ UsingSpotInstance, !Ref SpotPrice, !Ref AWS::NoValue ]
        LaunchTemplate:
          LaunchTemplateSpecification:
            LaunchTemplateId: !Ref LaunchTemplate45
            Version: !GetAtt LaunchTemplate45.LatestVersionNumber
          Overrides:
           - Fn::If:
             - InstanceTypeProvided
             - InstanceType: !Ref InstanceType
             - InstanceRequirements:
                 MemoryMiB:
                   Min: !Ref SpotMinMemoryMiB
                 VCpuCount:
                   Min: !Ref SpotMinVCpuCount
      MaxSize: !FindInMap [ ServerState, !Ref ServerState45, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState45, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster45:
    Type: AWS::ECS::Cluster
    DependsOn: EcsCluster44
    Properties:
      ClusterName: !Sub "${AWS::StackName}-cluster-45"

  LaunchTemplate45:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${AWS::StackName}-launch-template-45
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !GetAtt InstanceProfile.Arn
        ImageId: !Ref ECSAMI
        SecurityGroupIds:
        - !Ref Ec2Sg
        KeyName:
          !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            echo ECS_CLUSTER=${EcsCluster45} >> /etc/ecs/ecs.config

  EcsService45:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster45
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState45, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-45"
      TaskDefinition: !Ref EcsTask45
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask45:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount45A
    - Mount45B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-45"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs45
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: !Sub "${AWS::StackName}-factorio-45"
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 46 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs46:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS
      FileSystemTags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-fs-46"

  Mount46A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs46
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetA

  Mount46B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs46
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetB

  # ====================================================
  # 46 - INSTANCE CONFIG
  # ====================================================

  AutoScalingGroup46:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-46"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState46, DesiredCapacity ]
      MixedInstancesPolicy:
        InstancesDistribution:
          OnDemandPercentageAboveBaseCapacity:
            !If [ UsingSpotInstance, 0, 100 ]
          SpotAllocationStrategy: lowest-price
          SpotMaxPrice:
            !If [ UsingSpotInstance, !Ref SpotPrice, !Ref AWS::NoValue ]
        LaunchTemplate:
          LaunchTemplateSpecification:
            LaunchTemplateId: !Ref LaunchTemplate46
            Version: !GetAtt LaunchTemplate46.LatestVersionNumber
          Overrides:
           - Fn::If:
             - InstanceTypeProvided
             - InstanceType: !Ref InstanceType
             - InstanceRequirements:
                 MemoryMiB:
                   Min: !Ref SpotMinMemoryMiB
                 VCpuCount:
                   Min: !Ref SpotMinVCpuCount
      MaxSize: !FindInMap [ ServerState, !Ref ServerState46, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState46, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster46:
    Type: AWS::ECS::Cluster
    DependsOn: EcsCluster45
    Properties:
      ClusterName: !Sub "${AWS::StackName}-cluster-46"

  LaunchTemplate46:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${AWS::StackName}-launch-template-46
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !GetAtt InstanceProfile.Arn
        ImageId: !Ref ECSAMI
        SecurityGroupIds:
        - !Ref Ec2Sg
        KeyName:
          !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            echo ECS_CLUSTER=${EcsCluster46} >> /etc/ecs/ecs.config

  EcsService46:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster46
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState46, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-46"
      TaskDefinition: !Ref EcsTask46
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask46:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount46A
    - Mount46B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-46"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs46
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: !Sub "${AWS::StackName}-factorio-46"
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 47 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs47:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS
      FileSystemTags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-fs-47"

  Mount47A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs47
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetA

  Mount47B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs47
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetB

  # ====================================================
  # 47 - INSTANCE CONFIG
  # ====================================================

  AutoScalingGroup47:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-47"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState47, DesiredCapacity ]
      MixedInstancesPolicy:
        InstancesDistribution:
          OnDemandPercentageAboveBaseCapacity:
            !If [ UsingSpotInstance, 0, 100 ]
          SpotAllocationStrategy: lowest-price
          SpotMaxPrice:
            !If [ UsingSpotInstance, !Ref SpotPrice, !Ref AWS::NoValue ]
        LaunchTemplate:
          LaunchTemplateSpecification:
            LaunchTemplateId: !Ref LaunchTemplate47
            Version: !GetAtt LaunchTemplate47.LatestVersionNumber
          Overrides:
           - Fn::If:
             - InstanceTypeProvided
             - InstanceType: !Ref InstanceType
             - InstanceRequirements:
                 MemoryMiB:
                   Min: !Ref SpotMinMemoryMiB
                 VCpuCount:
                   Min: !Ref SpotMinVCpuCount
      MaxSize: !FindInMap [ ServerState, !Ref ServerState47, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState47, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster47:
    Type: AWS::ECS::Cluster
    DependsOn: EcsCluster46
    Properties:
      ClusterName: !Sub "${AWS::StackName}-cluster-47"

  LaunchTemplate47:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${AWS::StackName}-launch-template-47
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !GetAtt InstanceProfile.Arn
        ImageId: !Ref ECSAMI
        SecurityGroupIds:
        - !Ref Ec2Sg
        KeyName:
          !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            echo ECS_CLUSTER=${EcsCluster47} >> /etc/ecs/ecs.config

  EcsService47:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster47
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState47, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-47"
      TaskDefinition: !Ref EcsTask47
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask47:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount47A
    - Mount47B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-47"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs47
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: !Sub "${AWS::StackName}-factorio-47"
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 48 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs48:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS
      FileSystemTags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-fs-48"

  Mount48A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs48
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetA

  Mount48B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs48
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetB

  # ====================================================
  # 48 - INSTANCE CONFIG
  # ====================================================

  AutoScalingGroup48:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-48"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState48, DesiredCapacity ]
      MixedInstancesPolicy:
        InstancesDistribution:
          OnDemandPercentageAboveBaseCapacity:
            !If [ UsingSpotInstance, 0, 100 ]
          SpotAllocationStrategy: lowest-price
          SpotMaxPrice:
            !If [ UsingSpotInstance, !Ref SpotPrice, !Ref AWS::NoValue ]
        LaunchTemplate:
          LaunchTemplateSpecification:
            LaunchTemplateId: !Ref LaunchTemplate48
            Version: !GetAtt LaunchTemplate48.LatestVersionNumber
          Overrides:
           - Fn::If:
             - InstanceTypeProvided
             - InstanceType: !Ref InstanceType
             - InstanceRequirements:
                 MemoryMiB:
                   Min: !Ref SpotMinMemoryMiB
                 VCpuCount:
                   Min: !Ref SpotMinVCpuCount
      MaxSize: !FindInMap [ ServerState, !Ref ServerState48, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState48, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster48:
    Type: AWS::ECS::Cluster
    DependsOn: EcsCluster47
    Properties:
      ClusterName: !Sub "${AWS::StackName}-cluster-48"

  LaunchTemplate48:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${AWS::StackName}-launch-template-48
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !GetAtt InstanceProfile.Arn
        ImageId: !Ref ECSAMI
        SecurityGroupIds:
        - !Ref Ec2Sg
        KeyName:
          !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            echo ECS_CLUSTER=${EcsCluster48} >> /etc/ecs/ecs.config

  EcsService48:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster48
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState48, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-48"
      TaskDefinition: !Ref EcsTask48
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask48:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount48A
    - Mount48B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-48"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs48
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: !Sub "${AWS::StackName}-factorio-48"
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 49 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs49:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS
      FileSystemTags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-fs-49"

  Mount49A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs49
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetA

  Mount49B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs49
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetB

  # ====================================================
  # 49 - INSTANCE CONFIG
  # ====================================================

  AutoScalingGroup49:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-49"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState49, DesiredCapacity ]
      MixedInstancesPolicy:
        InstancesDistribution:
          OnDemandPercentageAboveBaseCapacity:
            !If [ UsingSpotInstance, 0, 100 ]
          SpotAllocationStrategy: lowest-price
          SpotMaxPrice:
            !If [ UsingSpotInstance, !Ref SpotPrice, !Ref AWS::NoValue ]
        LaunchTemplate:
          LaunchTemplateSpecification:
            LaunchTemplateId: !Ref LaunchTemplate49
            Version: !GetAtt LaunchTemplate49.LatestVersionNumber
          Overrides:
           - Fn::If:
             - InstanceTypeProvided
             - InstanceType: !Ref InstanceType
             - InstanceRequirements:
                 MemoryMiB:
                   Min: !Ref SpotMinMemoryMiB
                 VCpuCount:
                   Min: !Ref SpotMinVCpuCount
      MaxSize: !FindInMap [ ServerState, !Ref ServerState49, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState49, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster49:
    Type: AWS::ECS::Cluster
    DependsOn: EcsCluster48
    Properties:
      ClusterName: !Sub "${AWS::StackName}-cluster-49"

  LaunchTemplate49:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${AWS::StackName}-launch-template-49
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !GetAtt InstanceProfile.Arn
        ImageId: !Ref ECSAMI
        SecurityGroupIds:
        - !Ref Ec2Sg
        KeyName:
          !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            echo ECS_CLUSTER=${EcsCluster49} >> /etc/ecs/ecs.config

  EcsService49:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster49
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState49, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-49"
      TaskDefinition: !Ref EcsTask49
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask49:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount49A
    - Mount49B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-49"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs49
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: !Sub "${AWS::StackName}-factorio-49"
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 50 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs50:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS
      FileSystemTags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-fs-50"

  Mount50A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs50
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetA

  Mount50B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs50
      SecurityGroups:
      - !Ref EfsSg
      SubnetId: !Ref SubnetB

  # ====================================================
  # 50 - INSTANCE CONFIG
  # ====================================================

  AutoScalingGroup50:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-50"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState50, DesiredCapacity ]
      MixedInstancesPolicy:
        InstancesDistribution:
          OnDemandPercentageAboveBaseCapacity:
            !If [ UsingSpotInstance, 0, 100 ]
          SpotAllocationStrategy: lowest-price
          SpotMaxPrice:
            !If [ UsingSpotInstance, !Ref SpotPrice, !Ref AWS::NoValue ]
        LaunchTemplate:
          LaunchTemplateSpecification:
            LaunchTemplateId: !Ref LaunchTemplate50
            Version: !GetAtt LaunchTemplate50.LatestVersionNumber
          Overrides:
           - Fn::If:
             - InstanceTypeProvided
             - InstanceType: !Ref InstanceType
             - InstanceRequirements:
                 MemoryMiB:
                   Min: !Ref SpotMinMemoryMiB
                 VCpuCount:
                   Min: !Ref SpotMinVCpuCount
      MaxSize: !FindInMap [ ServerState, !Ref ServerState50, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState50, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster50:
    Type: AWS::ECS::Cluster
    DependsOn: EcsCluster49
    Properties:
      ClusterName: !Sub "${AWS::StackName}-cluster-50"

  LaunchTemplate50:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${AWS::StackName}-launch-template-50
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !GetAtt InstanceProfile.Arn
        ImageId: !Ref ECSAMI
        SecurityGroupIds:
        - !Ref Ec2Sg
        KeyName:
          !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            echo ECS_CLUSTER=${EcsCluster50} >> /etc/ecs/ecs.config

  EcsService50:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster50
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState50, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-50"
      TaskDefinition: !Ref EcsTask50
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask50:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount50A
    - Mount50B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-50"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs50
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: !Sub "${AWS::StackName}-factorio-50"
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # SET DNS RECORD - For all ASGs and EC2 instances
  # ====================================================

  SetDNSRecordLambdaRole:
    Type: AWS::IAM::Role
    Condition: DnsConfigEnabled
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "route53:*"
                  - "route53:ListHostedZones"
                Resource: "*"
              - Effect: "Allow"
                Action: "ec2:DescribeInstance*"
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - "s3:GetObject"
                  - "s3:ListBucket"
                Resource:
                  - !Sub "arn:aws:s3:::${S3ConfigBucket}"
                  - !Sub "arn:aws:s3:::${S3ConfigBucket}/*"

  S3ConfigBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: !Sub "${AWS::StackName}-config"
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  SetDNSRecordLambda:
    Type: "AWS::Lambda::Function"
    Condition: DnsConfigEnabled
    Properties:
      Environment:
        Variables:
          HostedZoneId: !Ref HostedZoneId
          SubDomainPrefix: !Ref SubDomainPrefix
          S3ConfigBucket: !Ref S3ConfigBucket
      Code:
        ZipFile: |
          import boto3
          import os
          import json
          import re
          import logging

          # Set up logging
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def get_domain_from_hosted_zone_id(hosted_zone_id):
              logger.info(f"Retrieving domain name for Hosted Zone ID: {hosted_zone_id}")
              route53 = boto3.client('route53')
              try:
                  response = route53.get_hosted_zone(Id=hosted_zone_id)
                  domain = response['HostedZone']['Name'].rstrip('.')
                  logger.info(f"Retrieved domain name: {domain}")
                  return domain
              except Exception as e:
                  logger.error(f"Error retrieving domain name: {str(e)}")
                  raise

          def handler(event, context):
              logger.info(f"Lambda function invoked with event: {json.dumps(event)}")

              asg_name = event['detail']['AutoScalingGroupName']
              logger.info(f"Processing Auto Scaling Group: {asg_name}")

              # Extract the number from the ASG name
              asg_number_match = re.search(r'-(\d+)$', asg_name)
              if not asg_number_match:
                  error_msg = f"Invalid ASG name format: {asg_name}"
                  logger.error(error_msg)
                  raise ValueError(error_msg)

              asg_number = asg_number_match.group(1)
              logger.info(f"Extracted ASG number: {asg_number}")

              # Get the base domain from the Hosted Zone Id
              hosted_zone_id = os.environ['HostedZoneId']
              base_domain = get_domain_from_hosted_zone_id(hosted_zone_id)

              # Generate the default domain name
              sub_domain_prefix = os.environ['SubDomainPrefix']
              default_domain = f"{sub_domain_prefix}-{asg_number}.{base_domain}"
              logger.info(f"Generated default domain name: {default_domain}")

              # Check for override config
              s3 = boto3.client('s3')
              s3_config_bucket = os.environ['S3ConfigBucket']
              logger.info(f"Checking for config override in S3 bucket: {s3_config_bucket}")
              try:
                  config_file = s3.get_object(Bucket=s3_config_bucket, Key='factorio.config.json')
                  config_content = config_file['Body'].read().decode('utf-8')
                  config = json.loads(config_content)
                  logger.info(f"Successfully loaded config from S3: {json.dumps(config)}")

                  # Look for the route override in the "routes" sub-object
                  routes = config.get('routes', {})
                  server_key = f"server-{asg_number}"
                  record_name = routes.get(server_key, default_domain)
                  logger.info(f"Using record name from config: {record_name}")
              except s3.exceptions.NoSuchKey:
                  logger.info("No config file found in S3, using default domain")
                  record_name = default_domain
              except Exception as e:
                  logger.error(f"Error reading config file: {str(e)}")
                  logger.info("Falling back to default domain")
                  record_name = default_domain

              # Get the new EC2 instance details
              ec2_instance_id = event['detail']['EC2InstanceId']
              logger.info(f"Retrieving details for EC2 instance: {ec2_instance_id}")
              new_instance = boto3.resource('ec2').Instance(ec2_instance_id)
              public_ip = new_instance.public_ip_address
              logger.info(f"Retrieved public IP for instance: {public_ip}")

              # Update Route 53 record
              logger.info(f"Updating Route 53 record for {record_name} to point to {public_ip}")
              route53 = boto3.client('route53')
              try:
                  response = route53.change_resource_record_sets(
                      HostedZoneId=hosted_zone_id,
                      ChangeBatch={
                          'Comment': f'Updating DNS for {asg_name}',
                          'Changes': [
                              {
                                  'Action': 'UPSERT',
                                  'ResourceRecordSet': {
                                      'Name': record_name,
                                      'Type': 'A',
                                      'TTL': 60,
                                      'ResourceRecords': [
                                          {
                                              'Value': public_ip
                                          },
                                      ]
                                  }
                              },
                          ]
                      })
                  logger.info(f"Successfully updated Route 53 record.")
              except Exception as e:
                  logger.error(f"Error updating Route 53 record: {str(e)}")
                  raise

              logger.info("Lambda function execution completed successfully")
      Description: Sets Route 53 DNS Record based on ASG name
      FunctionName: !Sub "${AWS::StackName}-set-dns"
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt SetDNSRecordLambdaRole.Arn
      Runtime: python3.12
      Timeout: 20

  LaunchEvent1:
    Type: AWS::Events::Rule
    Condition: DnsConfigEnabled
    Properties:
      EventPattern:
        source:
        - aws.autoscaling
        detail-type:
        - EC2 Instance Launch Successful
        detail:
          AutoScalingGroupName:
          - !Ref AutoScalingGroup1
          - !Ref AutoScalingGroup2
          - !Ref AutoScalingGroup3
          - !Ref AutoScalingGroup4
          - !Ref AutoScalingGroup5
          - !Ref AutoScalingGroup6
          - !Ref AutoScalingGroup7
          - !Ref AutoScalingGroup8
          - !Ref AutoScalingGroup9
          - !Ref AutoScalingGroup10
          - !Ref AutoScalingGroup11
          - !Ref AutoScalingGroup12
          - !Ref AutoScalingGroup13
          - !Ref AutoScalingGroup14
          - !Ref AutoScalingGroup15
          - !Ref AutoScalingGroup16
          - !Ref AutoScalingGroup17
          - !Ref AutoScalingGroup18
          - !Ref AutoScalingGroup19
          - !Ref AutoScalingGroup20
      Name: !Sub "${AWS::StackName}-instance-launch-1"
      State: ENABLED
      Targets:
        - Arn: !GetAtt SetDNSRecordLambda.Arn
          Id: !Sub "${AWS::StackName}-set-dns"

  LaunchEventLambdaPermission1:
    Type: AWS::Lambda::Permission
    Condition: DnsConfigEnabled
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt SetDNSRecordLambda.Arn
      Principal: events.amazonaws.com
      SourceArn: !GetAtt LaunchEvent1.Arn

  LaunchEvent2:
    Type: AWS::Events::Rule
    Condition: DnsConfigEnabled
    Properties:
      EventPattern:
        source:
        - aws.autoscaling
        detail-type:
        - EC2 Instance Launch Successful
        detail:
          AutoScalingGroupName:
          - !Ref AutoScalingGroup21
          - !Ref AutoScalingGroup22
          - !Ref AutoScalingGroup23
          - !Ref AutoScalingGroup24
          - !Ref AutoScalingGroup25
          - !Ref AutoScalingGroup26
          - !Ref AutoScalingGroup27
          - !Ref AutoScalingGroup28
          - !Ref AutoScalingGroup29
          - !Ref AutoScalingGroup30
          - !Ref AutoScalingGroup31
          - !Ref AutoScalingGroup32
          - !Ref AutoScalingGroup33
          - !Ref AutoScalingGroup34
          - !Ref AutoScalingGroup35
          - !Ref AutoScalingGroup36
          - !Ref AutoScalingGroup37
          - !Ref AutoScalingGroup38
          - !Ref AutoScalingGroup39
          - !Ref AutoScalingGroup40
      Name: !Sub "${AWS::StackName}-instance-launch-2"
      State: ENABLED
      Targets:
        - Arn: !GetAtt SetDNSRecordLambda.Arn
          Id: !Sub "${AWS::StackName}-set-dns"

  LaunchEventLambdaPermission2:
    Type: AWS::Lambda::Permission
    Condition: DnsConfigEnabled
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt SetDNSRecordLambda.Arn
      Principal: events.amazonaws.com
      SourceArn: !GetAtt LaunchEvent2.Arn

  LaunchEvent3:
    Type: AWS::Events::Rule
    Condition: DnsConfigEnabled
    Properties:
      EventPattern:
        source:
        - aws.autoscaling
        detail-type:
        - EC2 Instance Launch Successful
        detail:
          AutoScalingGroupName:
          - !Ref AutoScalingGroup41
          - !Ref AutoScalingGroup42
          - !Ref AutoScalingGroup43
          - !Ref AutoScalingGroup44
          - !Ref AutoScalingGroup45
          - !Ref AutoScalingGroup46
          - !Ref AutoScalingGroup47
          - !Ref AutoScalingGroup48
          - !Ref AutoScalingGroup49
          - !Ref AutoScalingGroup50
      Name: !Sub "${AWS::StackName}-instance-launch-3"
      State: ENABLED
      Targets:
        - Arn: !GetAtt SetDNSRecordLambda.Arn
          Id: !Sub "${AWS::StackName}-set-dns"

  LaunchEventLambdaPermission3:
    Type: AWS::Lambda::Permission
    Condition: DnsConfigEnabled
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt SetDNSRecordLambda.Arn
      Principal: events.amazonaws.com
      SourceArn: !GetAtt LaunchEvent3.Arn

